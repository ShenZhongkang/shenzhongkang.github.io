<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>[指南]: JavaScript中的var, let和const</title>
      <link href="/2020/10/13/post/"/>
      <url>/2020/10/13/post/</url>
      
        <content type="html"><![CDATA[<p><img src="https://www.valentinog.com/blog/static/7e9e29356715f3c4830524da02e4cf68/166a3/var-let-const-cheatsheet.png" alt="header-img"></p><ul><li><a href="#var">var</a><ul><li><a href="#块级作用域和全局作用域">块级作用域和全局作用域</a></li><li><a href="#意料之外的全局变量">意料之外的全局变量</a></li><li><a href="#重新分配和重新声明">重新分配和重新声明</a></li></ul></li><li><a href="#let">let</a><ul><li><a href="#块级作用域">块级作用域</a></li><li><a href="#临时死区">临时死区</a></li><li><a href="#可以重新赋值，不可以重新声明">可以重新赋值，不可以重新声明</a></li></ul></li><li><a href="#const">const</a><ul><li><a href="#const-块级作用域">块级作用域</a></li><li><a href="#const-临时死区">临时死区</a></li><li><a href="#不能重新赋值，不能重新声明">不能重新赋值，不能重新声明</a></li></ul></li></ul><h2 id="var"><a href="#var" class="headerlink" title="var"></a>var</h2><p><code>var</code>用来在JavaScript中声明一个变量，该变量遵循以下规则：</p><ul><li>函数级作用域(块级作用域)或者全局作用域。</li><li>不受暂时死区(Temporal dead zone)的约束。</li><li>在<code>window</code>对象下创建一个同名的全局属性。</li><li>可重新分配。</li><li>可重新声明。</li></ul><h3 id="块级作用域和全局作用域"><a href="#块级作用域和全局作用域" class="headerlink" title="块级作用域和全局作用域"></a>块级作用域和全局作用域</h3><p><code>var</code>如果是在全局作用域下出现，则创建一个全局变量，并且也同时在<code>window</code>对象中创建了一个同名的全局属性。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> city = <span class="string">"Beijing"</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">window</span>.city); <span class="comment">// "Beijing"</span></span><br></pre></td></tr></table></figure><p>当在函数中使用<code>var</code>声明变量时，则是函数级作用域。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> city = <span class="string">"Beijing"</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bubble</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> city = <span class="string">"Hangzhou"</span>;</span><br><span class="line">  <span class="built_in">console</span>.log(city);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">bubble(); <span class="comment">// "Hangzhou"</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(city); <span class="comment">// "Beijing"</span></span><br></pre></td></tr></table></figure><p><code>var</code>具有变量声明提升的特点</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bubble</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  city = <span class="string">"Beijing"</span>;</span><br><span class="line">  <span class="built_in">console</span>.log(city);</span><br><span class="line">  <span class="keyword">var</span> city; <span class="comment">// 被提升</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">bubble(); <span class="comment">// "Beijing"</span></span><br></pre></td></tr></table></figure><h3 id="意料之外的全局变量"><a href="#意料之外的全局变量" class="headerlink" title="意料之外的全局变量"></a>意料之外的全局变量</h3><p>没有使用<code>var</code>、<code>let</code>、<code>const</code>声明的变量，默认成为全局变量：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bubble</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  city = <span class="string">"Beijing"</span>;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="built_in">window</span>.city);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">bubble(); <span class="comment">// "Beijing"</span></span><br></pre></td></tr></table></figure><p>可以通过启用 <code>严格模式</code> 来规避这个问题:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">"use strict"</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bubble</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  city = <span class="string">"Beijing"</span>;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="built_in">window</span>.city);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">bubble(); <span class="comment">// ReferenceError: assignment to undeclared variable city</span></span><br></pre></td></tr></table></figure><h3 id="重新分配和重新声明"><a href="#重新分配和重新声明" class="headerlink" title="重新分配和重新声明"></a>重新分配和重新声明</h3><p>任何使用<code>var</code>定义的变量，都可以在后面再次声明或是再次赋值。</p><p>redeclaration:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bubble</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> city = <span class="string">"Beijing"</span>;</span><br><span class="line">  <span class="keyword">var</span> city = <span class="string">"Hangzhou"</span>;</span><br><span class="line">  <span class="built_in">console</span>.log(city);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">bubble(); <span class="comment">// "Hangzhou"</span></span><br></pre></td></tr></table></figure><p>reassignaton:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bubble</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> city = <span class="string">"Beijing"</span>;</span><br><span class="line">  city = <span class="string">"Hangzhou"</span>;</span><br><span class="line">  <span class="built_in">console</span>.log(city);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">bubble(); <span class="comment">// "Hangzhou"</span></span><br></pre></td></tr></table></figure><h2 id="let"><a href="#let" class="headerlink" title="let"></a>let</h2><p>使用<code>let</code>声明的变量遵循以下规则：</p><ul><li>块级作用域</li><li>受临时死区的限制</li><li>不会在<code>window</code>上创建任何属性</li><li>可以重新赋值</li><li>不可以重新声明</li></ul><h3 id="块级作用域"><a href="#块级作用域" class="headerlink" title="块级作用域"></a>块级作用域</h3><p><code>let</code>声明的变量不会在<code>window</code>上创建任何全局属性</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> city = <span class="string">"Beijing"</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">window</span>.city); <span class="comment">// undefined</span></span><br></pre></td></tr></table></figure><p>当在函数内使用<code>let</code>时，该变量的作用域仅限于函数内</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> city = <span class="string">"Beijing"</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bubble</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> city = <span class="string">"Hanzhou"</span>;</span><br><span class="line">  <span class="built_in">console</span>.log(city);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">bubble(); <span class="comment">// "Hangzhou"</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(city); <span class="comment">// "Beijing"</span></span><br></pre></td></tr></table></figure><p>当在代码块中使用<code>let</code>，改变量的作用域仅限于代码块中</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> city = <span class="string">"Beijing"</span>;</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">let</span> city = <span class="string">"Hangzhou"</span>;</span><br><span class="line">  <span class="built_in">console</span>.log(city); <span class="comment">// "Hangzhou"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(city); <span class="comment">// "Beijing"</span></span><br></pre></td></tr></table></figure><p><code>if</code>代码块</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> city = <span class="string">"Beijing"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> city = <span class="string">"Hangzhou"</span>;</span><br><span class="line">  <span class="built_in">console</span>.log(city); <span class="comment">// "Hangzhou"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(city); <span class="comment">// "Beijing"</span></span><br></pre></td></tr></table></figure><p>如果是<code>var</code>定义的，则不会产生块级作用域</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> city = <span class="string">"Beijing"</span>;</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">var</span> city = <span class="string">"Hangzhou"</span>;</span><br><span class="line">  <span class="built_in">console</span>.log(city); <span class="comment">// "Hangzhou"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">window</span>.city); <span class="comment">// "Hangzhou"</span></span><br></pre></td></tr></table></figure><h3 id="临时死区"><a href="#临时死区" class="headerlink" title="临时死区"></a>临时死区</h3><p><code>let</code>声明会提升，但是会加入临时死区。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bubble</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  city = <span class="string">"Beijing"</span>;</span><br><span class="line">  <span class="built_in">console</span>.log(city); <span class="comment">// TDZ</span></span><br><span class="line">  <span class="keyword">let</span> city;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">bubble(); <span class="comment">// ReferenceError: can't access lexical declaration 'city' before initialization</span></span><br></pre></td></tr></table></figure><p><code>TDZ(Temporal dead zone)</code>临时死区用来方式变量在初始化之前被访问。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bubble</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(city); <span class="comment">// TDZ</span></span><br><span class="line">  <span class="keyword">let</span> city = <span class="string">"Beijing"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">bubble(); <span class="comment">// ReferenceError: can't access lexical declaration 'city' before initialization</span></span><br></pre></td></tr></table></figure><p>出现上面这个异常错误，就代表出现了临时死区。</p><h3 id="可以重新赋值，不可以重新声明"><a href="#可以重新赋值，不可以重新声明" class="headerlink" title="可以重新赋值，不可以重新声明"></a>可以重新赋值，不可以重新声明</h3><p>can’t be redeclared:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bubble</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> city = <span class="string">"Beijing"</span>;</span><br><span class="line">  <span class="keyword">let</span> city = <span class="string">"Hanzhou"</span>;</span><br><span class="line">  <span class="built_in">console</span>.log(city);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">bubble(); <span class="comment">// SyntaxError: redeclaration of let city</span></span><br></pre></td></tr></table></figure><p>reassignation:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bubble</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> city = <span class="string">"Beijing"</span>;</span><br><span class="line">  city = <span class="string">"Hangzhou"</span>;</span><br><span class="line">  <span class="built_in">console</span>.log(city);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">bubble(); <span class="comment">// "Hangzhou"</span></span><br></pre></td></tr></table></figure><h2 id="const"><a href="#const" class="headerlink" title="const"></a>const</h2><p>使用<code>const</code>声明的变量遵循以下规则：</p><ul><li>块级作用域</li><li>受临时死区的限制</li><li>不创建任何挂载到<code>window</code>上的全局属性</li><li>不可以重新赋值</li><li>不可以重新声明</li></ul><h3 id="const-块级作用域"><a href="#const-块级作用域" class="headerlink" title="const-块级作用域"></a>const-块级作用域</h3><p><code>const</code>声明的变量不会在<code>window</code>上创建任何全局属性</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> city = <span class="string">"Beijing"</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">window</span>.city); <span class="comment">// undefined</span></span><br></pre></td></tr></table></figure><p>当在函数内使用<code>const</code>时，该变量的作用域仅限于函数内</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> city = <span class="string">"Beijing"</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bubble</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> city = <span class="string">"Hanzhou"</span>;</span><br><span class="line">  <span class="built_in">console</span>.log(city);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">bubble(); <span class="comment">// "Hangzhou"</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(city); <span class="comment">// "Beijing"</span></span><br></pre></td></tr></table></figure><p>当在代码块中使用<code>const</code>，改变量的作用域仅限于代码块中</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> city = <span class="string">"Beijing"</span>;</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">const</span> city = <span class="string">"Hangzhou"</span>;</span><br><span class="line">  <span class="built_in">console</span>.log(city); <span class="comment">// "Hangzhou"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(city); <span class="comment">// "Beijing"</span></span><br></pre></td></tr></table></figure><p><code>if</code>代码块</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> city = <span class="string">"Beijing"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> city = <span class="string">"Hangzhou"</span>;</span><br><span class="line">  <span class="built_in">console</span>.log(city); <span class="comment">// "Hangzhou"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(city); <span class="comment">// "Beijing"</span></span><br></pre></td></tr></table></figure><h3 id="const-临时死区"><a href="#const-临时死区" class="headerlink" title="const-临时死区"></a>const-临时死区</h3><p><code>const</code>声明会提升，但是会加入临时死区。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bubble</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  city = <span class="string">"Beijing"</span>;</span><br><span class="line">  <span class="keyword">const</span> city;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">bubble(); <span class="comment">// ReferenceError: can't access lexical declaration 'city' before initialization</span></span><br></pre></td></tr></table></figure><h3 id="不能重新赋值，不能重新声明"><a href="#不能重新赋值，不能重新声明" class="headerlink" title="不能重新赋值，不能重新声明"></a>不能重新赋值，不能重新声明</h3><p><code>const</code>声明的变量（常量）不能重新声明，也不能重新赋值。</p><p>can’t be redeclared</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bubble</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> city = <span class="string">"Beijing"</span>;</span><br><span class="line">  <span class="keyword">const</span> city = <span class="string">"Hangzhou"</span>;</span><br><span class="line">  <span class="built_in">console</span>.log(city);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">bubble(); <span class="comment">// SyntaxError: redeclaration of const city</span></span><br></pre></td></tr></table></figure><p>can’t be reassigned</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bubble</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> city = <span class="string">"Beijing"</span>;</span><br><span class="line">  city = <span class="string">"Hangzhou"</span>;</span><br><span class="line">  <span class="built_in">console</span>.log(city);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">bubble(); <span class="comment">// TypeError: invalid assignment to const 'city'</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Frontend </category>
          
          <category> 指南 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Frontend </tag>
            
            <tag> JavaScript </tag>
            
            <tag> ES6 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用 concurrently 同时运行多个 npm 命令</title>
      <link href="/2020/07/30/concurrently/"/>
      <url>/2020/07/30/concurrently/</url>
      
        <content type="html"><![CDATA[<p>我们平时可能需要同时在一个 npm scripts 中运行多个 npm 命令。这时候，我们第一时间想到的 <code>&amp;&amp;</code>，比如 <code>npm run build &amp;&amp; npm start</code>。虽然比较方便，但是很难追踪不同的输出，并且当其中一个进程失败的时候，另外的一个进程仍然在运行。这样就很难排查进程失败的原因是什么。<a href="https://www.npmjs.com/package/concurrently" target="_blank" rel="noopener">concurrently</a> 就可以帮助我们更好的执行脚本。</p><p>你可以全局安装:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g concurrently</span><br></pre></td></tr></table></figure><p>或者作为项目依赖安装:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install concurrently --save</span><br></pre></td></tr></table></figure><p>使用方法:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">concurrently <span class="string">"command1 arg"</span> <span class="string">"command2 arg"</span></span><br></pre></td></tr></table></figure><p>在项目中使用，我们只需要在我们的 npm scripts 里添加一个合并的命令:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"start"</span>: <span class="string">"concurrently \"command1 arg\" \"command2 arg\""</span></span><br></pre></td></tr></table></figure><p>更多文档，详情参考 <a href="https://github.com/kimmobrunfeldt/concurrently#readme" target="_blank" rel="noopener">这里</a>。</p>]]></content>
      
      
      <categories>
          
          <category> Frontend </category>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Frontend </tag>
            
            <tag> JavaScript </tag>
            
            <tag> Node </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于react-boilerplate脚手架添加前端代理</title>
      <link href="/2019/09/29/How%20to%20add%20proxy%20middleware%20based%20on%20react-boilerplate/"/>
      <url>/2019/09/29/How%20to%20add%20proxy%20middleware%20based%20on%20react-boilerplate/</url>
      
        <content type="html"><![CDATA[<p><code>React-Boilerplate</code>是一个对开发者非常友好的React脚手架，官方有很详细的文档，脚手架本身可配置的地方也很多，基本可以满足React开发中的自定义需求。本文介绍了如何在此脚手架添加前端Proxy，使api访问能够代理到指定ip。</p><h3 id="安装开发依赖-http-proxy-middleware"><a href="#安装开发依赖-http-proxy-middleware" class="headerlink" title="安装开发依赖 http-proxy-middleware"></a>安装开发依赖 <code>http-proxy-middleware</code></h3><p>前端常用的npm包，用来做node server代理的。通过npm或yarn作为开发依赖安装。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i http-proxy-middleware -D / yarn add http-proxy-middleware -D</span><br></pre></td></tr></table></figure><h3 id="在项目根目录添加-proxy-json-文件"><a href="#在项目根目录添加-proxy-json-文件" class="headerlink" title="在项目根目录添加 proxy.json 文件"></a>在项目根目录添加 <code>proxy.json</code> 文件</h3><p>此文件就是需要代理的api和转发到的ip以及端口了。具体撰写格式仿照下面:</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"default"</span>: &#123;</span><br><span class="line">    <span class="attr">"api"</span>: <span class="string">"http://localhost:8080"</span>,</span><br><span class="line">    <span class="attr">"endpoints"</span>: [</span><br><span class="line">      <span class="string">"/api/*"</span>,</span><br><span class="line">      <span class="string">"/auth/*"</span></span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"biz"</span>: &#123;</span><br><span class="line">    <span class="attr">"api"</span>: <span class="string">"http://localhost:8081"</span>,</span><br><span class="line">    <span class="attr">"endpoints"</span>: [</span><br><span class="line">      <span class="string">"/sys/*"</span>,</span><br><span class="line">      <span class="string">"/biz/*"</span></span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><code>*</code> 号会匹配 <code>/</code> 后面所有字符；</p></blockquote><h3 id="在server-middlewares文件夹里添加-addProxyMiddlewares-js-文件"><a href="#在server-middlewares文件夹里添加-addProxyMiddlewares-js-文件" class="headerlink" title="在server/middlewares文件夹里添加 addProxyMiddlewares.js 文件"></a>在server/middlewares文件夹里添加 <code>addProxyMiddlewares.js</code> 文件</h3><p>在这个文件里我们读取最外面的 <code>proxy.json</code> 并生成代理。代码如下:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* eslint-disable no-console */</span></span><br><span class="line"><span class="comment">// const proxy = require('http-proxy-middleware'); // 0.x.x版本用法</span></span><br><span class="line"><span class="keyword">const</span> &#123; createProxyMiddleware &#125; = <span class="built_in">require</span>(<span class="string">'http-proxy-middleware'</span>);</span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"><span class="keyword">const</span> chalk = <span class="built_in">require</span>(<span class="string">'chalk'</span>);</span><br><span class="line"><span class="keyword">const</span> logger = <span class="built_in">require</span>(<span class="string">'../logger'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Proxy middleware</span></span><br><span class="line"><span class="keyword">const</span> addProxyMiddlewares = <span class="function">(<span class="params">app, proxyPath</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> proxyConfig = &#123;&#125;;</span><br><span class="line">  <span class="keyword">if</span> (fs.existsSync(proxyPath)) &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      proxyConfig = <span class="built_in">JSON</span>.parse(fs.readFileSync(proxyPath, <span class="string">'utf-8'</span>));</span><br><span class="line">    &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">      logger.error(<span class="string">`parse ./proxy.json: <span class="subst">$&#123;error.message&#125;</span>`</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> servicesKeys = <span class="built_in">Object</span>.keys(proxyConfig);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'proxy config:'</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">JSON</span>.stringify(proxyConfig, <span class="number">0</span>, <span class="number">4</span>));</span><br><span class="line">    servicesKeys.forEach(<span class="function"><span class="params">key</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> service = proxyConfig[key];</span><br><span class="line">      <span class="keyword">const</span> &#123; api &#125; = service;</span><br><span class="line">      <span class="keyword">const</span> logLevel = service.logLevel || <span class="string">'info'</span>;</span><br><span class="line">      <span class="comment">// const Proxy = proxy(&#123; // 0.x.x版本用法</span></span><br><span class="line">      <span class="comment">//   target: api,</span></span><br><span class="line">      <span class="comment">//   logLevel,</span></span><br><span class="line">      <span class="comment">//   changeOrigin: true,</span></span><br><span class="line">      <span class="comment">// &#125;);</span></span><br><span class="line">      <span class="keyword">const</span> <span class="built_in">Proxy</span> = createProxyMiddleware(&#123;</span><br><span class="line">        target: api,</span><br><span class="line">        logLevel,</span><br><span class="line">        changeOrigin: <span class="literal">true</span></span><br><span class="line">      &#125;);</span><br><span class="line">      service.endpoints.forEach(<span class="function"><span class="params">endpoint</span> =&gt;</span> &#123;</span><br><span class="line">        app.all(endpoint, (req, res, next) =&gt; &#123;</span><br><span class="line">          <span class="built_in">console</span>.log(</span><br><span class="line">            <span class="string">`<span class="subst">$&#123;chalk.bold(<span class="string">'-&gt;'</span>)&#125;</span>: <span class="subst">$&#123;chalk.bold(req.url)&#125;</span> to <span class="subst">$&#123;chalk.gray(api)&#125;</span>`</span>,</span><br><span class="line">          );</span><br><span class="line">          <span class="keyword">return</span> <span class="built_in">Proxy</span>(req, res, next);</span><br><span class="line">        &#125;);</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">    logger.error(<span class="string">`proxy config error: <span class="subst">$&#123;error.message&#125;</span>`</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = <span class="function">(<span class="params">app, options</span>) =&gt;</span> &#123;</span><br><span class="line">  addProxyMiddlewares(app, options);</span><br><span class="line">  <span class="keyword">return</span> app;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>这里用到外层的 <code>logger.js</code> 在上一层文件夹里，脚手架自带的，用来在node启动服务时，打印一些日志或错误信息用的。</p></blockquote><h3 id="使用代理中间件"><a href="#使用代理中间件" class="headerlink" title="使用代理中间件"></a>使用代理中间件</h3><p>在 <code>server/middlewares</code> 文件夹里，找到 <code>frontendMiddleware.js</code>。使用代理包裹app实例。具体代码如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* eslint-disable global-require */</span></span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Front-end middleware</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="built_in">module</span>.exports = <span class="function">(<span class="params">app, options</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> isProd = process.env.NODE_ENV === <span class="string">'production'</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (isProd) &#123;</span><br><span class="line">    <span class="keyword">const</span> addProdMiddlewares = <span class="built_in">require</span>(<span class="string">'./addProdMiddlewares'</span>);</span><br><span class="line">    addProdMiddlewares(app, options);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> webpackConfig = <span class="built_in">require</span>(<span class="string">'../../internals/webpack/webpack.dev.babel'</span>);</span><br><span class="line">    <span class="keyword">const</span> addDevMiddlewares = <span class="built_in">require</span>(<span class="string">'./addDevMiddlewares'</span>);</span><br><span class="line">    <span class="keyword">const</span> addProxyMiddlewares = <span class="built_in">require</span>(<span class="string">'./addProxyMiddlewares'</span>);</span><br><span class="line">    <span class="keyword">const</span> proxyPath = path.resolve(process.cwd(), <span class="string">'proxy.json'</span>);</span><br><span class="line">    addProxyMiddlewares(app, proxyPath);</span><br><span class="line">    addDevMiddlewares(app, webpackConfig);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> app;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="完成"><a href="#完成" class="headerlink" title="完成"></a>完成</h3><p>此时就可以在 <code>proxy.json</code> 中添加你想要代理的api和ip了。然后通过 <code>npm start</code> 启动，可以看到控制台里会打印出代理的ip和发送的一些请求。此脚手架还可以通过 <code>PORT=4000 npm start</code> 的方式，指定端口启动。 </p>]]></content>
      
      
      <categories>
          
          <category> Frontend </category>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Frontend </tag>
            
            <tag> JavaScript </tag>
            
            <tag> React </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>联想zuk z2 pro线刷官方底包</title>
      <link href="/2019/08/12/how%20to%20usb-flash%20rom%20on%20lenovo%20zuk%20z2%20pro/"/>
      <url>/2019/08/12/how%20to%20usb-flash%20rom%20on%20lenovo%20zuk%20z2%20pro/</url>
      
        <content type="html"><![CDATA[<h3 id="ROM说明"><a href="#ROM说明" class="headerlink" title="ROM说明"></a>ROM说明</h3><p>适配机型：联想zuk z2 pro（z2121）<br>zui版本：zui 4.0.247<br>安卓版本：8.0<br>刷机类型：线刷包<br>压缩包大小：1.8G<br>包名：Z2121_CN_OPEN_USER_Q00030.1_O_ZUI_4.0.247_ST_181017_qpst.zip<br>包下载地址：<a href="https://pan.baidu.com/s/1d4IL0aZbJ4ffNaS5D7YWMg" target="_blank" rel="noopener">ROM</a> 提取码: stf7<br>工具下载地址：<a href="https://pan.baidu.com/s/1YnMxVe2lyQqtuReB75xBUQ" target="_blank" rel="noopener">刷机工具</a> 提取码: ecmk  </p><blockquote><p>刷机前请注意备份数据。</p></blockquote><h3 id="过程"><a href="#过程" class="headerlink" title="过程"></a>过程</h3><ol><li><p>下载ROM包和线刷工具，解压工具包。找到QPST.2.7.434.msi，安装。* 请提前安装zuk驱动和vc支持库。<br><img src="https://pcs4.clubstatic.lenovo.com.cn/data/attachment/forum/201606/27/140511saqtlee33xazjagx.jpg.thumb.jpg" alt="qpst"><br>注意：若双击qpst安装时出现下图界面，则需要安装Microsoft .NET Framework 4.0。<br><img src="https://pcs4.clubstatic.lenovo.com.cn/data/attachment/forum/201606/27/140518hx2841c3ceb0xkih.jpg.thumb.jpg" alt="alert">  </p></li><li><p>安装完成后，找到QFIL程序，打开。  </p><ol><li>进入QFIL的<code>Configuration</code>标签页的<code>FireHoseConfiguration</code>, Device Type选择<code>UFS</code>，勾选<code>Reset After Download</code>。<br><img src="https://pcs4.clubstatic.lenovo.com.cn/data/attachment/forum/201606/27/140520ns9fqs64dl68eopm.jpg.thumb.jpg" alt="config">  </li><li>Select Build Type选择<code>Meta Build</code>，点击<code>Load Content</code>，定位到下载的底包文件夹里的<code>contents.xml</code>，选择确定。<br><img src="https://pcs4.clubstatic.lenovo.com.cn/data/attachment/forum/201606/27/140522hu64ffu4av4oafv7.jpg.thumb.jpg" alt="before download">  </li><li>usb数据线<code>一端先连接电脑</code>，然后手机<code>关机</code>状态下，按住<code>音量上</code>键不松，然后按住<code>电源键</code>的同时<code>数据线插入手机</code>，插入后松开电源键，看到QFIL界面出现<code>9008端口</code>时，放开音量上键。<br><img src="https://pcs4.clubstatic.lenovo.com.cn/data/attachment/forum/201606/27/145804vmhqixhrrilzxqxe.jpg.thumb.jpg" alt="show">  </li><li>点击<code>Download Content</code>手机会进入升级模式。升级完成后在status里会看到<code>Download Succeed</code>的日志带出即为成功。  </li></ol></li></ol><blockquote><p>如果一直无法识别9008端口，可以尝试一下方法:</p><ul><li>开机状态下，进入【开发者选项】开启【允许USB调试】，连接电脑使用cmd（或adb）命令行工具，输入adb reboot edl回车运行，运行成功后手机将重启进入9008端口。(注意看手机提示，如果有提示需要允许调试，请允许)  </li><li>先进入工程模式，进入方式有2种：<ul><li>进入方式1：关机机状态下【按住音量下+电源键】，先出现白色ZUK标志，等待2s进入工程模式（全英文界面）;</li><li>进入方式2：关机状态下【按住音量下】，然后插入数据线，手机震动后放开按键，等待2s左右出现工程模式（全英文界面）;  </li></ul></li></ul></blockquote><p>  进入工程模式后，插入数据线连接电脑，QFIL软件上显示shenqi USB端口，然后点击【download】触发9008端口。</p><ul><li>关机状态下【同时按住音量键+电源键+指纹键】，大概震动和重启8~9次，看到进入9008端口就放开。</li><li>准备两根数据线，其中一根自制为工程线，操作如下：<ol><li>把一根数据线表皮剥开，可以看到里面有红色，白色，黑色，绿色四条线；</li><li>先把黑色和绿色的线剪断，然后把剪断后的黑线和绿线的表皮剥开，露出里面的铜线；</li><li>把黑线和绿线露出的铜线进行短接（也就是缠绕，拧在一起），做成工程线；</li><li>分别把普通数据线和自制工程线事先都连接到电脑，打开qpst刷机工具配置好；</li><li>一直按住电源键，先用工程线连接手机，等到手机震动一下之后拔掉并放开电源键；</li><li>手机立即再连接普通的数据线（速度尽可能快），电脑上显示9008端口。<br>（注意：如果QFIL工具提示 please select an existing port，请点击右上角select a port，勾选9008点击OK）  </li></ol></li><li>如果条件有限，可以尝试另一种方式：<ol><li>把一根数据线表皮剥开，可以看到里面有红色，白色，黑色，绿色四条线；</li><li>然后把黑线和绿线的表皮剥开一段，露出里面的铜线；</li><li>用把黑线和绿线露出的铜线进行短接（可以用金属夹子先夹住）；</li><li>打开qpst刷机工具配置好，按住电源键，用这条线连接手机和电脑，等到手机震动一下之后松开短接的铜线；</li><li>如果连接顺利，QFIL应该也会出现9008端口；</li></ol></li></ul>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 刷机 </tag>
            
            <tag> Android </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello Everyone</title>
      <link href="/2018/01/05/hello%20hexo/"/>
      <url>/2018/01/05/hello%20hexo/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
          <category> Mac </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Tech </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
