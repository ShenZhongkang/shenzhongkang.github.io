<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>一些代码优化技巧</title>
      <link href="/2021/01/05/javascript-34-shorthands/"/>
      <url>/2021/01/05/javascript-34-shorthands/</url>
      
        <content type="html"><![CDATA[<h4 id="1-判断多个平行条件"><a href="#1-判断多个平行条件" class="headerlink" title="1. 判断多个平行条件"></a>1. 判断多个平行条件</h4><blockquote><p>可以将参与判断的多个条件存为一个数组，使用数组的 <code>includes</code> 方法判断</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// longhand</span></span><br><span class="line"><span class="keyword">if</span> (x === <span class="string">'abc'</span> || x === <span class="string">'def'</span> || x === <span class="string">'ghi'</span> || x === <span class="string">'jkl'</span>) &#123;</span><br><span class="line">  <span class="comment">/*** some code ***/</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// shorthand</span></span><br><span class="line"><span class="keyword">if</span> ([<span class="string">'abc'</span>, <span class="string">'def'</span>, <span class="string">'ghi'</span>, <span class="string">'jkl'</span>].includes(x)) &#123;</span><br><span class="line">  <span class="comment">/*** some code ***/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-简单的-if-else"><a href="#2-简单的-if-else" class="headerlink" title="2. 简单的 if ... else"></a>2. 简单的 <code>if ... else</code></h4><blockquote><p>对于不包含大量逻辑代码的判断，可以使用三元来判断。</p></blockquote><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// longhand</span></span><br><span class="line"><span class="keyword">var</span> test: <span class="built_in">boolean</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (x &gt; <span class="number">100</span>) &#123;</span><br><span class="line">  test = <span class="literal">true</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  test = <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// shorthand</span></span><br><span class="line"><span class="keyword">var</span> test = (x &gt; <span class="number">100</span>) ? <span class="literal">true</span> : <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(test);</span><br></pre></td></tr></table></figure><p>当有嵌套的条件时:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> x = <span class="number">300</span>,</span><br><span class="line">test2 = (x &gt; <span class="number">100</span>) ? <span class="string">'greater than 100'</span> : (x &lt; <span class="number">50</span>) ? <span class="string">'less than 50'</span> : <span class="string">'between 50 and 100'</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(test2); <span class="comment">// 'greater than 100'</span></span><br></pre></td></tr></table></figure><h4 id="3-声明变量"><a href="#3-声明变量" class="headerlink" title="3. 声明变量"></a>3. 声明变量</h4><blockquote><p>当声明多个具有普通类型和普通值的变量时</p></blockquote><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// longhand</span></span><br><span class="line"><span class="keyword">let</span> test1 = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">let</span> test2 = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// shorthand</span></span><br><span class="line"><span class="keyword">let</span> test1, test2 = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// longhand</span></span><br><span class="line"><span class="keyword">let</span> test1: <span class="built_in">boolean</span>;</span><br><span class="line"><span class="keyword">let</span> test2: <span class="built_in">boolean</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// shorthand</span></span><br><span class="line"><span class="keyword">let</span> test1, test2: <span class="built_in">boolean</span>;</span><br></pre></td></tr></table></figure><h4 id="4-null-undefined和空值判断"><a href="#4-null-undefined和空值判断" class="headerlink" title="4. null, undefined和空值判断"></a>4. <code>null</code>, <code>undefined</code>和空值判断</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// longhand</span></span><br><span class="line"><span class="keyword">if</span> (test1 !== <span class="literal">null</span> || test1 !== <span class="literal">undefined</span> || test1 !== <span class="string">''</span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> test2 = test1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// shorthand</span></span><br><span class="line"><span class="keyword">var</span> test2 = test1 || <span class="string">''</span>;</span><br></pre></td></tr></table></figure><h4 id="5-null-检查并赋默认值"><a href="#5-null-检查并赋默认值" class="headerlink" title="5. null 检查并赋默认值"></a>5. <code>null</code> 检查并赋默认值</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> test1 = <span class="literal">null</span>,</span><br><span class="line">    test2 = test1 || <span class="string">''</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"null check"</span>, test2); <span class="comment">// output: '' (an empty string)</span></span><br></pre></td></tr></table></figure><h4 id="6-undefined-检查并赋默认值"><a href="#6-undefined-检查并赋默认值" class="headerlink" title="6. undefined 检查并赋默认值"></a>6. <code>undefined</code> 检查并赋默认值</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> test1 = <span class="literal">undefined</span>,</span><br><span class="line">    test2 = test1 || <span class="string">''</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"undefined check"</span>, test2); <span class="comment">// output: '' (an empty string)</span></span><br></pre></td></tr></table></figure><h4 id="7-多个变量赋值"><a href="#7-多个变量赋值" class="headerlink" title="7. 多个变量赋值"></a>7. 多个变量赋值</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// longhand</span></span><br><span class="line"><span class="keyword">let</span> test1, test2, test3;</span><br><span class="line">test1 = <span class="number">1</span>;</span><br><span class="line">test2 = <span class="number">2</span>;</span><br><span class="line">test3 = <span class="number">3</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// shorthand</span></span><br><span class="line"><span class="keyword">let</span> [ test1, test2, test3 ] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br></pre></td></tr></table></figure><h4 id="8-运算符简化"><a href="#8-运算符简化" class="headerlink" title="8. 运算符简化"></a>8. 运算符简化</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// longhand</span></span><br><span class="line">test1 = test1 + <span class="number">1</span>;</span><br><span class="line">test2 = test2 - <span class="number">1</span>;</span><br><span class="line">test3 = test3 * <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// shorthand</span></span><br><span class="line">test1++;</span><br><span class="line">test2--;</span><br><span class="line">test3 * = <span class="number">10</span>;</span><br></pre></td></tr></table></figure><h4 id="9-真值判断"><a href="#9-真值判断" class="headerlink" title="9. 真值判断"></a>9. 真值判断</h4><blockquote><p>虽然平时常用，但仍值得一提</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// longhand</span></span><br><span class="line"><span class="keyword">if</span> (test1 === <span class="literal">true</span>) &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// shorthand</span></span><br><span class="line"><span class="keyword">if</span> (test1) &#123;&#125;</span><br></pre></td></tr></table></figure><p>相反的判断:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// longhand</span></span><br><span class="line"><span class="keyword">var</span> test1;</span><br><span class="line"><span class="keyword">if</span> (test1 !== <span class="literal">true</span>) &#123;</span><br><span class="line">  <span class="comment">// do something</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// shorthand</span></span><br><span class="line"><span class="keyword">var</span> test1;</span><br><span class="line"><span class="keyword">if</span> (!test1) &#123;</span><br><span class="line">  <span class="comment">// do something</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="10-AND-amp-amp-操作符判断条件"><a href="#10-AND-amp-amp-操作符判断条件" class="headerlink" title="10. AND(&amp;&amp;) 操作符判断条件"></a>10. <code>AND(&amp;&amp;)</code> 操作符判断条件</h4><blockquote><p>如果只在条件为真时才调用函数</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// longhand</span></span><br><span class="line"><span class="keyword">if</span> (test1) &#123;</span><br><span class="line">  callMethod();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// shorthand</span></span><br><span class="line">test1 &amp;&amp; callMethod();</span><br></pre></td></tr></table></figure><h4 id="11-foreach-循环"><a href="#11-foreach-循环" class="headerlink" title="11. foreach 循环"></a>11. <code>foreach</code> 循环</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// longhand</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; testData.length; i++)</span><br><span class="line"></span><br><span class="line"><span class="comment">// shorthand</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i <span class="keyword">in</span> testData)</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">testData</span>(<span class="params">element, index, array</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'test['</span> + index + <span class="string">'] = '</span> + element);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].forEach(testData);</span><br><span class="line"><span class="comment">// logs: test[0] = 1, test[1] = 2, test[2] = 3</span></span><br></pre></td></tr></table></figure><h4 id="12-条件判断返回"><a href="#12-条件判断返回" class="headerlink" title="12. 条件判断返回"></a>12. 条件判断返回</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// longhand</span></span><br><span class="line"><span class="keyword">if</span> (!(test == <span class="literal">undefined</span>)) &#123;</span><br><span class="line">  <span class="keyword">return</span> test;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> callMe(<span class="string">'test'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// shorthand</span></span><br><span class="line"><span class="keyword">return</span> ret || callMe(<span class="string">'test'</span>);</span><br></pre></td></tr></table></figure><h4 id="13-箭头函数"><a href="#13-箭头函数" class="headerlink" title="13. 箭头函数"></a>13. 箭头函数</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// longhand</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">test1, test2</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> test1 + test2;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// shorthand</span></span><br><span class="line"><span class="keyword">const</span> add = <span class="function">(<span class="params">test1, test2</span>) =&gt;</span> test1 + test2;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">callMe</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'Hello'</span>, name);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">callMe = <span class="function"><span class="params">name</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="string">'Hello'</span>, name);</span><br></pre></td></tr></table></figure><h4 id="14-缩短函数调用"><a href="#14-缩短函数调用" class="headerlink" title="14. 缩短函数调用"></a>14. 缩短函数调用</h4><blockquote><p>使用三元运算符</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// longhand</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test1</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'test1'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test2</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'test2'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> test3 = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span> (test3 == <span class="number">1</span>) &#123;</span><br><span class="line">  test1();</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  test2();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// shorthand</span></span><br><span class="line">(test3 === <span class="number">1</span> ? test1:test2)();</span><br></pre></td></tr></table></figure><h4 id="15-switch-函数调用"><a href="#15-switch-函数调用" class="headerlink" title="15. switch 函数调用"></a>15. <code>switch</code> 函数调用</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// longhand</span></span><br><span class="line"><span class="keyword">switch</span> (data) &#123;</span><br><span class="line">  <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">    test1();</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">    test2();</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">    test();</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  <span class="comment">// And so on ... </span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// shorthand</span></span><br><span class="line"><span class="keyword">var</span> data = &#123;</span><br><span class="line">  <span class="number">1</span>: test1,</span><br><span class="line">  <span class="number">2</span>: test2,</span><br><span class="line">  <span class="number">3</span>: test</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">data[something] &amp;&amp; data[something]();</span><br></pre></td></tr></table></figure><h4 id="16-隐式返回"><a href="#16-隐式返回" class="headerlink" title="16. 隐式返回"></a>16. 隐式返回</h4><blockquote><p>使用箭头函数特性</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// longhand</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">calcCircumference</span>(<span class="params">diameter</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Math</span>.PI * diameter;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// shorthand</span></span><br><span class="line">calcCircumference = <span class="function"><span class="params">diameter</span> =&gt;</span> <span class="built_in">Math</span>.PI * diameter;</span><br></pre></td></tr></table></figure><h4 id="17-科学计数"><a href="#17-科学计数" class="headerlink" title="17. 科学计数"></a>17. 科学计数</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// longhand</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">10000</span>; i++) &#123; ... &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// shorthand</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">1e4</span>; i++) &#123; ... &#125;</span><br></pre></td></tr></table></figure><h4 id="18-参数默认值"><a href="#18-参数默认值" class="headerlink" title="18. 参数默认值"></a>18. 参数默认值</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// longhand</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">test1, test2</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (test1 === <span class="literal">undefined</span>)</span><br><span class="line">    test1 = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">if</span> (test2 === <span class="literal">undefined</span>)</span><br><span class="line">    test2 = <span class="number">2</span>;</span><br><span class="line">  <span class="keyword">return</span> test1 + test2;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// shorthand</span></span><br><span class="line">add = <span class="function">(<span class="params">test1 = <span class="number">1</span>, test2 = <span class="number">2</span></span>) =&gt;</span> (test1 + test2);</span><br><span class="line"></span><br><span class="line">add(); <span class="comment">// output: 3</span></span><br></pre></td></tr></table></figure><h4 id="19-对象扩展符"><a href="#19-对象扩展符" class="headerlink" title="19. 对象扩展符"></a>19. 对象扩展符</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// longhand</span></span><br><span class="line"><span class="keyword">const</span> data = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="keyword">const</span> test = [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>].concat(data);</span><br><span class="line"></span><br><span class="line"><span class="comment">// shorthand</span></span><br><span class="line"><span class="keyword">const</span> data = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="keyword">const</span> test = [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, ...data];</span><br><span class="line"><span class="built_in">console</span>.log(test); <span class="comment">// [4, 5, 6, 1, 2, 3];</span></span><br></pre></td></tr></table></figure><p>拷贝</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// longhand</span></span><br><span class="line"><span class="keyword">const</span> test1 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="keyword">const</span> test2 = test1.slice();</span><br><span class="line"></span><br><span class="line"><span class="comment">// shorthand</span></span><br><span class="line"><span class="keyword">const</span> test1 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="keyword">const</span> test2 = [...test1];</span><br></pre></td></tr></table></figure><h4 id="20-模板字符串"><a href="#20-模板字符串" class="headerlink" title="20. 模板字符串"></a>20. 模板字符串</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// longhand</span></span><br><span class="line"><span class="keyword">const</span> welcome = <span class="string">'Hi '</span> + test1 + <span class="string">' '</span> + test2 + <span class="string">'.'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// shorthand</span></span><br><span class="line"><span class="keyword">const</span> welcome = <span class="string">`Hi <span class="subst">$&#123;test1&#125;</span> <span class="subst">$&#123;test2&#125;</span>`</span>;</span><br></pre></td></tr></table></figure><h4 id="21-多行字符串"><a href="#21-多行字符串" class="headerlink" title="21. 多行字符串"></a>21. 多行字符串</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// longhand</span></span><br><span class="line"><span class="keyword">const</span> lorem = <span class="string">'Lorem ipsum dolor sit amet, consectetur\n\t'</span></span><br><span class="line">    + <span class="string">'adipisicing elit, sed do eiusmod tempor incididunt\n\t'</span></span><br><span class="line">    + <span class="string">'ut labore et dolore magna aliqua. Ut enim ad minim\n\t'</span></span><br><span class="line">    + <span class="string">'veniam, quis nostrud exercitation ullamco laboris\n\t'</span></span><br><span class="line">    + <span class="string">'nisi ut aliquip ex ea commodo consequat. Duis aute\n\t'</span></span><br><span class="line">    + <span class="string">'irure dolor in reprehenderit in voluptate velit esse.\n\t'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//shorthand</span></span><br><span class="line"><span class="keyword">const</span> lorem = <span class="string">`Lorem ipsum dolor sit amet, consectetur</span></span><br><span class="line"><span class="string">    adipisicing elit, sed do eiusmod tempor incididunt</span></span><br><span class="line"><span class="string">    ut labore et dolore magna aliqua. Ut enim ad minim</span></span><br><span class="line"><span class="string">    veniam, quis nostrud exercitation ullamco laboris</span></span><br><span class="line"><span class="string">    nisi ut aliquip ex ea commodo consequat. Duis aute</span></span><br><span class="line"><span class="string">    irure dolor in reprehenderit in voluptate velit esse.`</span></span><br></pre></td></tr></table></figure><h4 id="22-对象属性简写"><a href="#22-对象属性简写" class="headerlink" title="22. 对象属性简写"></a>22. 对象属性简写</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> test1 = <span class="string">'a'</span>;</span><br><span class="line"><span class="keyword">let</span> test2 = <span class="string">'b'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// longhand</span></span><br><span class="line"><span class="keyword">let</span> obj = &#123; <span class="attr">test1</span>: test1, <span class="attr">test2</span>: test2 &#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// shorthand</span></span><br><span class="line"><span class="keyword">let</span> obj = &#123; test1, test2 &#125;;</span><br></pre></td></tr></table></figure><h4 id="23-字符串转数字"><a href="#23-字符串转数字" class="headerlink" title="23. 字符串转数字"></a>23. 字符串转数字</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// longhand</span></span><br><span class="line"><span class="keyword">let</span> test1 = <span class="built_in">parseInt</span>(<span class="string">'123'</span>);</span><br><span class="line"><span class="keyword">let</span> test2 = <span class="built_in">parseFloat</span>(<span class="string">'12.3'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// shorthand</span></span><br><span class="line"><span class="keyword">let</span> test1 = +<span class="string">'123'</span>;</span><br><span class="line"><span class="keyword">let</span> test2 = +<span class="string">'12.3'</span>;</span><br></pre></td></tr></table></figure><h4 id="24-解构"><a href="#24-解构" class="headerlink" title="24. 解构"></a>24. 解构</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// longhand</span></span><br><span class="line"><span class="keyword">const</span> test1 = <span class="keyword">this</span>.data.test1;</span><br><span class="line"><span class="keyword">const</span> test2 = <span class="keyword">this</span>.data.test2;</span><br><span class="line"><span class="keyword">const</span> test3 = <span class="keyword">this</span>.data.test3;</span><br><span class="line"></span><br><span class="line"><span class="comment">// shorthand</span></span><br><span class="line"><span class="keyword">const</span> &#123; test1, test2, test3 &#125; = <span class="keyword">this</span>.data;</span><br></pre></td></tr></table></figure><h4 id="25-Array-find"><a href="#25-Array-find" class="headerlink" title="25. Array.find"></a>25. <code>Array.find</code></h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> data = [</span><br><span class="line">  &#123; <span class="attr">type</span>: <span class="string">'test1'</span>, <span class="attr">name</span>: <span class="string">'abc'</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">type</span>: <span class="string">'test2'</span>, <span class="attr">name</span>: <span class="string">'def'</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">type</span>: <span class="string">'test1'</span>, <span class="attr">name</span>: <span class="string">'ghi'</span> &#125;</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">findtest1</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; data.length; ++i) &#123;</span><br><span class="line">    <span class="keyword">if</span> (data[i].type === <span class="string">'test1'</span> &amp;&amp; data[i].name === name) &#123;</span><br><span class="line">      <span class="keyword">return</span> data[i];</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// shorthand</span></span><br><span class="line">filteredData = data.find(<span class="function"><span class="params">data</span> =&gt;</span> data.type === <span class="string">'test1'</span> &amp;&amp; data.name === <span class="string">'fgh'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(filteredData); <span class="comment">// &#123; type: 'test1', name: 'ghi' &#125;</span></span><br></pre></td></tr></table></figure><h4 id="26-检索条件"><a href="#26-检索条件" class="headerlink" title="26. 检索条件"></a>26. 检索条件</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// longhand</span></span><br><span class="line"><span class="keyword">if</span> (type === <span class="string">'test1'</span>) &#123;</span><br><span class="line">  test1();</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (type === <span class="string">'test2'</span>) &#123;</span><br><span class="line">  test2();</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (type === <span class="string">'test3'</span>) &#123;</span><br><span class="line">  test3();</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (type === <span class="string">'test4'</span>) &#123;</span><br><span class="line">  test4();</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'Invalid value '</span> + type);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// shorthand</span></span><br><span class="line"><span class="keyword">var</span> types = &#123;</span><br><span class="line">  test1: test1,</span><br><span class="line">  test2: test2,</span><br><span class="line">  test3: test3,</span><br><span class="line">  test4: test4</span><br><span class="line">&#125;;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">var</span> func = types[type];</span><br><span class="line">(!func) &amp;&amp; <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'Invalid value '</span> + type); func();</span><br></pre></td></tr></table></figure><h4 id="27-按位索引"><a href="#27-按位索引" class="headerlink" title="27. 按位索引"></a>27. 按位索引</h4><blockquote><p>The <code>bitwise(~)</code> operator will return a truthy value for anything but <code>-1</code>. Negating it is as simple as doing <code>!~</code>.</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// longhand</span></span><br><span class="line"><span class="keyword">if</span> (arr.indexOf(item) &gt; <span class="number">-1</span>) &#123; <span class="comment">// item found</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (arr.indexOf(item) === <span class="number">-1</span>) &#123; <span class="comment">// item not found</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// shorthand</span></span><br><span class="line"><span class="keyword">if</span> (~arr.indexOf(item)) &#123; <span class="comment">// item found</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!~arr.indexOf(item)) &#123; <span class="comment">// item not found</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="28-Object-entries"><a href="#28-Object-entries" class="headerlink" title="28. Object.entries()"></a>28. <code>Object.entries()</code></h4><blockquote><p>将对象转化为数组</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> data = &#123; <span class="attr">test1</span>: <span class="string">'abc'</span>, <span class="attr">test2</span>: <span class="string">'cde'</span>, <span class="attr">test3</span>: <span class="string">'efg'</span> &#125;;</span><br><span class="line"><span class="keyword">const</span> arr = <span class="built_in">Object</span>.entries(data);</span><br><span class="line"><span class="built_in">console</span>.log(arr);</span><br><span class="line"></span><br><span class="line"><span class="comment">/** Output:</span></span><br><span class="line"><span class="comment"> * [ ['test1', 'abc'],</span></span><br><span class="line"><span class="comment"> *   ['test2', 'cde'].</span></span><br><span class="line"><span class="comment"> *   ['test3', 'efg']</span></span><br><span class="line"><span class="comment"> * ]</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><h4 id="29-Object-values"><a href="#29-Object-values" class="headerlink" title="29. Object.values()"></a>29. <code>Object.values()</code></h4><blockquote><p><em>[ES8]</em> 类似 <code>Object.entries()</code>, 不含 <code>key</code></p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> data = &#123; <span class="attr">test1</span>: <span class="string">'abc'</span>, <span class="attr">test2</span>: <span class="string">'cde'</span> &#125;;</span><br><span class="line"><span class="keyword">const</span> arr = <span class="built_in">Object</span>.values(data);</span><br><span class="line"><span class="built_in">console</span>.log(arr);</span><br><span class="line"></span><br><span class="line"><span class="comment">/** Output:</span></span><br><span class="line"><span class="comment"> * [ 'abc', 'cde' ]</span></span><br><span class="line"><span class="comment"> * /</span></span><br></pre></td></tr></table></figure><h4 id="30-双按位非运算"><a href="#30-双按位非运算" class="headerlink" title="30. 双按位非运算 ~~"></a>30. 双按位非运算 <code>~~</code></h4><blockquote><p><code>!~~</code> 仅适用于32位整型</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// longhand</span></span><br><span class="line"><span class="built_in">Math</span>.floor(<span class="number">1.9</span>) === <span class="number">1</span> <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// shorthand</span></span><br><span class="line">~~<span class="number">1.9</span> === <span class="number">1</span> <span class="comment">// true</span></span><br></pre></td></tr></table></figure><h4 id="31-重复字符串"><a href="#31-重复字符串" class="headerlink" title="31. 重复字符串"></a>31. 重复字符串</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// longhand</span></span><br><span class="line"><span class="keyword">let</span> test = <span class="string">''</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">  test += <span class="string">'test '</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(test); <span class="comment">// test test test test test </span></span><br><span class="line"></span><br><span class="line"><span class="comment">// shorthand</span></span><br><span class="line"><span class="string">'test '</span>.repeat(<span class="number">5</span>);</span><br></pre></td></tr></table></figure><h4 id="32-数组中最大最小值"><a href="#32-数组中最大最小值" class="headerlink" title="32. 数组中最大最小值"></a>32. 数组中最大最小值</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="built_in">Math</span>.max(...arr); <span class="comment">// 3</span></span><br><span class="line"><span class="built_in">Math</span>.min(...arr); <span class="comment">// 1</span></span><br></pre></td></tr></table></figure><h4 id="33-字符串中的某个字符"><a href="#33-字符串中的某个字符" class="headerlink" title="33. 字符串中的某个字符"></a>33. 字符串中的某个字符</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> str = <span class="string">'abc'</span>;</span><br><span class="line"><span class="comment">// longhand</span></span><br><span class="line">str.charAt(<span class="number">2</span>); <span class="comment">// c</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// shorthand</span></span><br><span class="line">str[<span class="number">2</span>]; <span class="comment">// c</span></span><br></pre></td></tr></table></figure><h4 id="34-次方"><a href="#34-次方" class="headerlink" title="34. 次方"></a>34. 次方</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// longhand</span></span><br><span class="line"><span class="built_in">Math</span>.pow(<span class="number">2</span>, <span class="number">3</span>); <span class="comment">// 8</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// shorthand</span></span><br><span class="line"><span class="number">2</span> ** <span class="number">3</span> <span class="comment">// 8</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Frontend </category>
          
          <category> Tips </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Frontend </tag>
            
            <tag> JavaScript </tag>
            
            <tag> ES8 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何优雅地展开(拍平)一个数组</title>
      <link href="/2020/12/18/How-to-elegantly-flatten-a-list/"/>
      <url>/2020/12/18/How-to-elegantly-flatten-a-list/</url>
      
        <content type="html"><![CDATA[<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>给定任一数组<code>xs</code>，其内部可能包含任意类型的值或是其他数组。我们希望展开<code>xs</code>内部所有的值，变为一个一维数组。例如：</p><ol><li><code>flatten([1, [3], [[6, 7], [[[]], 8]]]) =&gt; [1, 3, 6, 7, 8]</code></li><li><code>flatten([{a: 3}, 1, [[&#39;&#39;], 2]]) =&gt; [{a: 3}, 1, &#39;&#39;, 2]</code></li></ol><h2 id="递归方案"><a href="#递归方案" class="headerlink" title="递归方案"></a>递归方案</h2><p>当我们要实现一个递归的方案时，我们必须避免递归地去思考。不要让你的代码陷入到递归调用里。<br>正确的方法是假设你的函数能够在一个输入一个较小的数组时正常工作，在这种情况下，较小的输入结构显然是<code>xs</code>的尾部，即<code>xs.slice(1)</code>。<br>这种假设称为<code>信仰之跃</code>。</p><p>那么，当<code>flatten(xs.slice(1))</code>能够正确输出时，我们怎么样来完成整个的<code>flatten(xs)</code>呢？显然我们还缺少<code>xs[0]</code>,<code>xs[0]</code>可能是一个非数组，也有可能是一个数组。</p><p>如果<code>xs[0]</code>是个非数组，那处理起来就很简单，我们直接给他加到数组的第一个位置就行。</p><p>如果<code>xs[0]</code>是个数组呢，那我们就继续<code>信仰之跃</code>，然后递归的调用<code>flatten(xs[0])</code>,把结果合并起来就好。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">flatten</span>(<span class="params">xs</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">Array</span>.isArray(xs[<span class="number">0</span>])) <span class="keyword">return</span> [...flatten(xs[<span class="number">0</span>]), ...flatten(xs.slice(<span class="number">1</span>))];</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">return</span> [xs[<span class="number">0</span>], ...flatten(xs.slice(<span class="number">1</span>))];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>至此，基本算是完成了。不过我们还忽略了最简单的输入，如果输入的是个空数组呢？我们应该直接返回空数组。</p><p>所以，最终代码如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">flatten</span>(<span class="params">xs</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(xs.length === <span class="number">0</span>) <span class="keyword">return</span> [];</span><br><span class="line">  <span class="keyword">if</span>(<span class="built_in">Array</span>.isArray(xs[<span class="number">0</span>])) <span class="keyword">return</span> [...flatten(xs[<span class="number">0</span>]), ...flatten(xs.slice(<span class="number">1</span>))];</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">return</span> [xs[<span class="number">0</span>], ...flatten(xs.slice(<span class="number">1</span>))];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Frontend </category>
          
          <category> Course </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Frontend </tag>
            
            <tag> JavaScript </tag>
            
            <tag> ES6 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Jest: JavaScript单元测试快速入门</title>
      <link href="/2020/10/14/getting-started-with-javascript-testing/"/>
      <url>/2020/10/14/getting-started-with-javascript-testing/</url>
      
        <content type="html"><![CDATA[<p><img src="https://www.valentinog.com/blog/static/fb2ec01570723a0b1c24255109718879/c1b63/getting-started-with-jest.png" alt="header-img"></p><h2 id="测试意味着什么？"><a href="#测试意味着什么？" class="headerlink" title="测试意味着什么？"></a>测试意味着什么？</h2><p>在技术术语中，测试意味着检查我们的代码是否符合某些期望。例如，名为<code>transformer</code>的函数，应在给定某些输入的情况下返回预期的输出。</p><p>测试类型很多，这么多术语很快就会让人感到不知所措，简而言之测试分为下面三大类：</p><ul><li>单元测试</li><li>整合测试</li><li>UI测试</li></ul><p>本文仅介绍单元测试。</p><h2 id="Jest是什么？"><a href="#Jest是什么？" class="headerlink" title="Jest是什么？"></a>Jest是什么？</h2><p>Jest是JavaScript测试运行程序，即用于创建、运行和构建测试的JavaScript库。</p><p>Jest使用npm来安装，你可以将其安装在任意javascript项目中,Jest是当今最受欢迎的测试运行程序之一，也是React项目的默认选择。</p><h2 id="我怎么知道要测试什么？"><a href="#我怎么知道要测试什么？" class="headerlink" title="我怎么知道要测试什么？"></a>我怎么知道要测试什么？</h2><p>初接触测试，即使最简单的测试代码块，也会让初学者懵逼。最常见的问题就是”我怎么知道要测试什么？“。</p><p>如果你正在编写web应用程序，那么一个好的切入点就是测试应用程序的每个页面以及每个交互。但是，web应用程序也由功能和模块之类的代码单元组成，也需要进行测试。</p><p>通常有下面两种情况：</p><ul><li>旧项目，没有写过单元测试</li><li>新项目，要从头写单元测试</li></ul><p>对于这两种情况，都应同样将测试视为代码的一部分来进行检查，这些代码可以检查给定函数是否产生预期的结果。典型的测试流程如下所示：</p><ul><li>导入要测试的功能</li><li>给定输入</li><li>定义期望的输出</li><li>检查函数是否产生预期的输出</li></ul><p>就这么简单，如果你按照这个思路考虑，测试将不再可怕：输入-预期输出-输出验证结果</p><p>现在就动手试一试。</p><h2 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mkdir getting-started-with-jest &amp;&amp; <span class="built_in">cd</span> <span class="variable">$_</span></span><br><span class="line">npm init -y</span><br></pre></td></tr></table></figure><p>通过<code>npm</code>来安装`jest</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i jest --save-dev</span><br></pre></td></tr></table></figure><p>修改下<code>package.json</code>中的<code>scripts</code>来方便运行测试</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">"script": &#123;</span><br><span class="line">  "test": "jest"</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Specifications-和-TDD（test-driven-development-测试驱动开发）"><a href="#Specifications-和-TDD（test-driven-development-测试驱动开发）" class="headerlink" title="Specifications 和 TDD（test-driven development: 测试驱动开发）"></a>Specifications 和 TDD（test-driven development: 测试驱动开发）</h2><p>作为开发人员，一般都比较自信（我写的代码绝对没问题）。但是，当涉及到比较复杂的业务逻辑时，通常没法掌控更多的细节。</p><p>所以我们必须遵循测试用例：即是对构建的内容的书面的或口头的描述。</p><p>下文中，我们写个简单的用例，我们需要写一个函数，该函数需要过滤对象数组，对于每个对象，我们必须检查一个名为”url”的属性，如果该属性的值与给定字符串匹配，则应在结果数组中含括匹配的对象。</p><p>作为一个精通测试的js开发人员，你应该遵循测试驱动开发，这是一种在开始编写代码之前必须编写失败测试的准则。</p><p>默认情况下Jest会在项目下找名为<code>__tests__</code>的文件夹。</p><p>我们在项目根目录下创建个文件夹，名为<code>__tests__</code>:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir __tests__</span><br></pre></td></tr></table></figure><p>然后在这个文件夹里，新建个测试用例名为<code>filterByTerm.spec.js</code>。用例以<code>.spec.js</code>作为文件后缀，是从<code>Ruby</code>借鉴的作为一种约定。</p><p>下面开始写用例。</p><p><code>filterByTerm.spec.js</code>：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">describe(<span class="string">"Filter function"</span>, () =&gt; &#123;</span><br><span class="line">  <span class="comment">// test stuff</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>第一个接触到的方法是<code>describe</code>，用来包含一个或多个相关的测试方法。之后每次新写用例时，都使用<code>describe</code>来包装。此方法有两个参数，第一个参数是用来描述测试的字符串，第二个参数是包含测试代码的回调函数。</p><p>下一个方法是<code>test</code>，用来写具体的测试代码块。</p><p><code>filterByTerm.spec.js</code>：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">describe(<span class="string">"Filter function"</span>, () =&gt; &#123;</span><br><span class="line">  test(<span class="string">"it should filter by a search term (link)"</span>, () =&gt; &#123;</span><br><span class="line">    <span class="comment">// actual test</span></span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>下面我们来写用例，按照步骤，我们先准备个输入:</p><p><code>filterByTerm.spec.js</code>：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">describe(<span class="string">"Filter function"</span>, () =&gt; &#123;</span><br><span class="line">  test(<span class="string">"it should filter by a search term (link)"</span>, () =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> input = [</span><br><span class="line">      &#123; <span class="attr">id</span>: <span class="number">1</span>, <span class="attr">url</span>: <span class="string">"https://www.url1.dev"</span> &#125;,</span><br><span class="line">      &#123; <span class="attr">id</span>: <span class="number">2</span>, <span class="attr">url</span>: <span class="string">"https://www.url2.dev"</span> &#125;,</span><br><span class="line">      &#123; <span class="attr">id</span>: <span class="number">3</span>, <span class="attr">url</span>: <span class="string">"https://www.link3.dev"</span> &#125;</span><br><span class="line">    ];</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>定义一个预期的输出:</p><p><code>filterByTerm.spec.js</code>：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">describe(<span class="string">"Filter function"</span>, () =&gt; &#123;</span><br><span class="line">  test(<span class="string">"it should filter by a search term (link)"</span>, () =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> input = [</span><br><span class="line">      &#123; <span class="attr">id</span>: <span class="number">1</span>, <span class="attr">url</span>: <span class="string">"https://www.url1.dev"</span> &#125;,</span><br><span class="line">      &#123; <span class="attr">id</span>: <span class="number">2</span>, <span class="attr">url</span>: <span class="string">"https://www.url2.dev"</span> &#125;,</span><br><span class="line">      &#123; <span class="attr">id</span>: <span class="number">3</span>, <span class="attr">url</span>: <span class="string">"https://www.link3.dev"</span> &#125;</span><br><span class="line">    ];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> output = [&#123; <span class="attr">id</span>: <span class="number">3</span>, <span class="attr">url</span>: <span class="string">"https://www.link3.dev"</span> &#125;];</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>我们使用<code>expect</code>和一个Jest的matcher来检查函数在调用时是否返回了预期的结果:</p><p><code>filterByTerm.spec.js</code>：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">describe(<span class="string">"Filter function"</span>, () =&gt; &#123;</span><br><span class="line">  test(<span class="string">"it should filter by a search term (link)"</span>, () =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> input = [</span><br><span class="line">      &#123; <span class="attr">id</span>: <span class="number">1</span>, <span class="attr">url</span>: <span class="string">"https://www.url1.dev"</span> &#125;,</span><br><span class="line">      &#123; <span class="attr">id</span>: <span class="number">2</span>, <span class="attr">url</span>: <span class="string">"https://www.url2.dev"</span> &#125;,</span><br><span class="line">      &#123; <span class="attr">id</span>: <span class="number">3</span>, <span class="attr">url</span>: <span class="string">"https://www.link3.dev"</span> &#125;</span><br><span class="line">    ];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> output = [&#123; <span class="attr">id</span>: <span class="number">3</span>, <span class="attr">url</span>: <span class="string">"https://www.link3.dev"</span> &#125;];</span><br><span class="line"></span><br><span class="line">    expect(filterByTerm(input, <span class="string">"link"</span>)).toEqual(output);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>然后执行<code>npm test</code>，这时候会报个错误<code>ReferenceError: filterByTerm is not defined</code>，这是因为我们先写了用例，还没有写这个名为<code>filterByTerm</code>的函数。下面来写这个函数。</p><p>为了方便，暂时就把函数写在当前的测试文件里面。这个函数比较简单，就是从对象数组中过滤还包含所传标识的对象。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">filterByTerm</span>(<span class="params">inputArr, searchTerm</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> inputArr.filter(<span class="function"><span class="keyword">function</span>(<span class="params">arrayElement</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> arrayElement.url.match(searchTerm);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">describe(<span class="string">"Filter function"</span>, () =&gt; &#123;</span><br><span class="line">  test(<span class="string">"it should filter by a search term (link)"</span>, () =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> input = [</span><br><span class="line">      &#123; <span class="attr">id</span>: <span class="number">1</span>, <span class="attr">url</span>: <span class="string">"https://www.url1.dev"</span> &#125;,</span><br><span class="line">      &#123; <span class="attr">id</span>: <span class="number">2</span>, <span class="attr">url</span>: <span class="string">"https://www.url2.dev"</span> &#125;,</span><br><span class="line">      &#123; <span class="attr">id</span>: <span class="number">3</span>, <span class="attr">url</span>: <span class="string">"https://www.link3.dev"</span> &#125;</span><br><span class="line">    ];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> output = [&#123; <span class="attr">id</span>: <span class="number">3</span>, <span class="attr">url</span>: <span class="string">"https://www.link3.dev"</span> &#125;];</span><br><span class="line"></span><br><span class="line">    expect(filterByTerm(input, <span class="string">"link"</span>)).toEqual(output);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>然后运行<code>npm test</code>，可以看到测试通过</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"> PASS  __tests__/filterByTerm.spec.js</span><br><span class="line">  Filter <span class="keyword">function</span></span><br><span class="line">    ✓ it should filter by a search term (link) (4ms)</span><br><span class="line"></span><br><span class="line">Test Suites: 1 passed, 1 total</span><br><span class="line">Tests:       1 passed, 1 total</span><br><span class="line">Snapshots:   0 total</span><br><span class="line">Time:        0.836s, estimated 1s</span><br></pre></td></tr></table></figure><p>这就完事儿了吗？并没有，我们来写个失败的用例。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">filterByTerm</span>(<span class="params">inputArr, searchTerm</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> inputArr.filter(<span class="function"><span class="keyword">function</span>(<span class="params">arrayElement</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> arrayElement.url.match(searchTerm);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">describe(<span class="string">"Filter function"</span>, () =&gt; &#123;</span><br><span class="line">  test(<span class="string">"it should filter by a search term (link)"</span>, () =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> input = [</span><br><span class="line">      &#123; <span class="attr">id</span>: <span class="number">1</span>, <span class="attr">url</span>: <span class="string">"https://www.url1.dev"</span> &#125;,</span><br><span class="line">      &#123; <span class="attr">id</span>: <span class="number">2</span>, <span class="attr">url</span>: <span class="string">"https://www.url2.dev"</span> &#125;,</span><br><span class="line">      &#123; <span class="attr">id</span>: <span class="number">3</span>, <span class="attr">url</span>: <span class="string">"https://www.link3.dev"</span> &#125;</span><br><span class="line">    ];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> output = [&#123; <span class="attr">id</span>: <span class="number">3</span>, <span class="attr">url</span>: <span class="string">"https://www.link3.dev"</span> &#125;];</span><br><span class="line"></span><br><span class="line">    expect(filterByTerm(input, <span class="string">"link"</span>)).toEqual(output);</span><br><span class="line"></span><br><span class="line">    expect(filterByTerm(input, <span class="string">"LINK"</span>)).toEqual(output); <span class="comment">// New test</span></span><br><span class="line"></span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>再次执行，会发现报错了，并没有忽略小大写。</p><p>我们修改一下我们函数的实现，让用例跑通：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">filterByTerm</span>(<span class="params">inputArr, searchTerm</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> regex = <span class="keyword">new</span> <span class="built_in">RegExp</span>(searchTerm, <span class="string">"i"</span>);</span><br><span class="line">  <span class="keyword">return</span> inputArr.filter(<span class="function"><span class="keyword">function</span>(<span class="params">arrayElement</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> arrayElement.url.match(regex);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="代码覆盖率"><a href="#代码覆盖率" class="headerlink" title="代码覆盖率"></a>代码覆盖率</h2><p>在了解代码覆盖率之前，我们先把函数从单元测试中分离出来。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mkdir src &amp;&amp; cd $_</span><br><span class="line">touch filterByTerm.js</span><br></pre></td></tr></table></figure><p>把单元测试里的函数代码剪切过来<br><code>filterByTerm.js</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">filterByTerm</span>(<span class="params">inputArr, searchTerm</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (!searchTerm) <span class="keyword">throw</span> <span class="built_in">Error</span>(<span class="string">"searchTerm cannot be empty"</span>);</span><br><span class="line">  <span class="keyword">const</span> regex = <span class="keyword">new</span> <span class="built_in">RegExp</span>(searchTerm, <span class="string">"i"</span>);</span><br><span class="line">  <span class="keyword">return</span> inputArr.filter(<span class="function"><span class="keyword">function</span>(<span class="params">arrayElement</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> arrayElement.url.match(regex);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = filterByTerm;</span><br></pre></td></tr></table></figure><p>那现在假设来了新的接锅侠，写了新的代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">filterByTerm</span>(<span class="params">inputArr, searchTerm</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (!searchTerm) <span class="keyword">throw</span> <span class="built_in">Error</span>(<span class="string">"searchTerm cannot be empty"</span>);</span><br><span class="line">  <span class="keyword">if</span> (!inputArr.length) <span class="keyword">throw</span> <span class="built_in">Error</span>(<span class="string">"inputArr cannot be empty"</span>); <span class="comment">// new line</span></span><br><span class="line">  <span class="keyword">const</span> regex = <span class="keyword">new</span> <span class="built_in">RegExp</span>(searchTerm, <span class="string">"i"</span>);</span><br><span class="line">  <span class="keyword">return</span> inputArr.filter(<span class="function"><span class="keyword">function</span>(<span class="params">arrayElement</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> arrayElement.url.match(regex);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = filterByTerm;</span><br></pre></td></tr></table></figure><p>除非告知代码里添加了新的语句，需要写单元测试，不然的话，并不知道要测试哪一块代码。所以就需要一个可以统计代码测试覆盖率的工具来查看，哪些代码有单元测试，哪些没有。</p><p>我们可以在执行test时候加上<code>--converage</code>后缀来查看覆盖率，不过在此之前，我们在<code>__tests__/filterByTerm.spec.js</code>里引入我们要测试的函数。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> filterByTerm = <span class="built_in">require</span>(<span class="string">"../src/filterByTerm"</span>);</span><br><span class="line"><span class="comment">// ...</span></span><br></pre></td></tr></table></figure><p>执行<code>npm test -- --coverage</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"> PASS  __tests__/filterByTerm.spec.js</span><br><span class="line">  Filter <span class="keyword">function</span></span><br><span class="line">    ✓ it should filter by a search term (link) (3ms)</span><br><span class="line">    ✓ it should filter by a search term (uRl) (1ms)</span><br><span class="line">    ✓ it should throw when searchTerm is empty string (2ms)</span><br><span class="line"></span><br><span class="line">-----------------|----------|----------|----------|----------|-------------------|</span><br><span class="line">File             |  % Stmts | % Branch |  % Funcs |  % Lines | Uncovered Line <span class="comment">#s |</span></span><br><span class="line">-----------------|----------|----------|----------|----------|-------------------|</span><br><span class="line">All files        |     87.5 |       75 |      100 |      100 |                   |</span><br><span class="line"> filterByTerm.js |     87.5 |       75 |      100 |      100 |                 3 |</span><br><span class="line">-----------------|----------|----------|----------|----------|-------------------|</span><br><span class="line">Test Suites: 1 passed, 1 total</span><br><span class="line">Tests:       3 passed, 3 total</span><br></pre></td></tr></table></figure><p>可以看到统计结果，第三行没有被覆盖到。</p><p>如果想要代码覆盖率检查始终处于活动状态，我们可以配置<code>package.json</code></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">"scripts": &#123;</span><br><span class="line">  "test": "jest"</span><br><span class="line">&#125;,</span><br><span class="line">"jest": &#123;</span><br><span class="line">  "collectCoverage": true</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p>如果需要可视化的页面查看结果</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">"scripts": &#123;</span><br><span class="line">  "test": "jest"</span><br><span class="line">&#125;,</span><br><span class="line">"jest": &#123;</span><br><span class="line">  "collectCoverage": true,</span><br><span class="line">  "coverageReporters": ["html"]</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p>现在，每次运行npm test时，你都可以看到在项目文件夹下有个<code>coverage</code>新文件夹。可以打开其中的index.html来查看覆盖率摘要。<br><img src="https://www.valentinog.com/blog/static/103027a1ecf34032c19f225c2d27a3d7/166a3/jest-html-code-coverage-report.png" alt="coverage-result"></p><p>点击文件名称，可以查看测试详情。</p><p><img src="https://www.valentinog.com/blog/static/b3717c8169510b4cb7ae44f92a927289/dd507/jest-html-code-coverage-report-single-file.png" alt="file-test-detail"></p><p>完整的单元测试</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> filterByTerm = <span class="built_in">require</span>(<span class="string">"../src/filterByTerm"</span>);</span><br><span class="line"></span><br><span class="line">describe(<span class="string">"Filter function"</span>, () =&gt; &#123;</span><br><span class="line">  test(<span class="string">"it should filter by a search term (link)"</span>, () =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> input = [</span><br><span class="line">      &#123; <span class="attr">id</span>: <span class="number">1</span>, <span class="attr">url</span>: <span class="string">"https://www.url1.dev"</span> &#125;,</span><br><span class="line">      &#123; <span class="attr">id</span>: <span class="number">2</span>, <span class="attr">url</span>: <span class="string">"https://www.url2.dev"</span> &#125;,</span><br><span class="line">      &#123; <span class="attr">id</span>: <span class="number">3</span>, <span class="attr">url</span>: <span class="string">"https://www.link3.dev"</span> &#125;</span><br><span class="line">    ];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> output = [&#123; <span class="attr">id</span>: <span class="number">3</span>, <span class="attr">url</span>: <span class="string">"https://www.link3.dev"</span> &#125;];</span><br><span class="line"></span><br><span class="line">    expect(filterByTerm(input, <span class="string">"link"</span>)).toEqual(output);</span><br><span class="line">    expect(filterByTerm(input, <span class="string">"LINK"</span>)).toEqual(output);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  test(<span class="string">"it should filter by a search term (uRl)"</span>, () =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> input = [</span><br><span class="line">      &#123; <span class="attr">id</span>: <span class="number">1</span>, <span class="attr">url</span>: <span class="string">"https://www.url1.dev"</span> &#125;,</span><br><span class="line">      &#123; <span class="attr">id</span>: <span class="number">2</span>, <span class="attr">url</span>: <span class="string">"https://www.url2.dev"</span> &#125;,</span><br><span class="line">      &#123; <span class="attr">id</span>: <span class="number">3</span>, <span class="attr">url</span>: <span class="string">"https://www.link3.dev"</span> &#125;</span><br><span class="line">    ];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> output = [</span><br><span class="line">      &#123; <span class="attr">id</span>: <span class="number">1</span>, <span class="attr">url</span>: <span class="string">"https://www.url1.dev"</span> &#125;,</span><br><span class="line">      &#123; <span class="attr">id</span>: <span class="number">2</span>, <span class="attr">url</span>: <span class="string">"https://www.url2.dev"</span> &#125;</span><br><span class="line">    ];</span><br><span class="line"></span><br><span class="line">    expect(filterByTerm(input, <span class="string">"uRl"</span>)).toEqual(output);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  test(<span class="string">"it should throw when searchTerm is empty string"</span>, () =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> input = [];</span><br><span class="line">    expect(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      filterByTerm(input, <span class="string">""</span>);</span><br><span class="line">    &#125;).toThrowError(<span class="built_in">Error</span>(<span class="string">"searchTerm cannot be empty"</span>));</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>是不是非常直观呢，通过查看单元测试覆盖率，就可以查看哪些代码没有被测试覆盖到。从而针对性的编写单元测试和测试用例。</p>]]></content>
      
      
      <categories>
          
          <category> Frontend </category>
          
          <category> 测试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Frontend </tag>
            
            <tag> JavaScript </tag>
            
            <tag> Jest </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[夯实基础]使用JavaScript生成表格</title>
      <link href="/2020/10/14/create-html-table-with-js/"/>
      <url>/2020/10/14/create-html-table-with-js/</url>
      
        <content type="html"><![CDATA[<p>使用原生API来操作DOM是很多技术面试中会问到的问题，这篇文章里，我们不使用任何框架或库，就使用纯原生的js来创建一个表格。</p><h2 id="前提"><a href="#前提" class="headerlink" title="前提"></a>前提</h2><p>你需要具备基本的HTML和JavaScript知识。</p><h2 id="需求分析"><a href="#需求分析" class="headerlink" title="需求分析"></a>需求分析</h2><p>我们需要将一份名为”mountains“的数组（<code>Collections</code>），渲染为一个表格。指定每个<code>Object</code>的<code>key</code>为表格的列（<code>Column</code>），每一个<code>Object</code>为一行（<code>Row</code>）。</p><p>Object结构大概像下面这个样子:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123; <span class="attr">name</span>: <span class="string">"泰山"</span>, <span class="attr">height</span>: <span class="number">1532.7</span>, <span class="attr">place</span>: <span class="string">"山东省泰安市泰山区"</span> &#125;</span><br></pre></td></tr></table></figure><p><code>name</code>是山名，<code>height</code>是山的海拔，<code>place</code>是山的位置。</p><p>表格的数据源大概是下面这个样子:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> mountains = [</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">"泰山"</span>, <span class="attr">height</span>: <span class="number">1532.7</span>, <span class="attr">place</span>: <span class="string">"山东省泰安市泰山区"</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">"嵩山"</span>, <span class="attr">height</span>: <span class="number">1491.71</span>, <span class="attr">place</span>: <span class="string">"河南省郑州市登封市"</span> &#125;</span><br><span class="line">];</span><br></pre></td></tr></table></figure><p>我们希望通过这份数据，生成如下网页结构:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">thead</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">th</span>&gt;</span>名称<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">th</span>&gt;</span>海拔<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">th</span>&gt;</span>位置<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">thead</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">tbody</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">td</span>&gt;</span>泰山<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">td</span>&gt;</span>1532.7<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">td</span>&gt;</span>山东省泰安市泰山区<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">td</span>&gt;</span>嵩山<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">td</span>&gt;</span>1491.71<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">td</span>&gt;</span>河南省郑州市登封市<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">tbody</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure><p>如上，可以看到这个表格（table），包含一个表格头部thead（table head），thead包含一行tr（table row），这一行里又有三列表头信息th（table header）。<br>表格又包含了表格主体tbody（table body），tbody包含多行，每行又有多个单元格用td表示（table cells）。</p><p>分析完需求后，先来创建个html文件<code>index.html</code>:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Build a table<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- here goes out data! --&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"build-table.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>创建个js文件叫<code>build-table.js</code>和<code>index.html</code>放在同样目录下就行，接下来就在js文件中来写主要的代码。</p><p>现在有<code>五岳</code>的数据：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> mountains = [</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">"泰山"</span>, <span class="attr">height</span>: <span class="number">1532.7</span>, <span class="attr">place</span>: <span class="string">"山东省泰安市泰山区"</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">"嵩山"</span>, <span class="attr">height</span>: <span class="number">1491.71</span>, <span class="attr">place</span>: <span class="string">"河南省郑州市登封市"</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">"华山"</span>, <span class="attr">height</span>: <span class="number">2154.9</span>, <span class="attr">place</span>: <span class="string">"陕西省渭南市华阴市"</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">"衡山"</span>, <span class="attr">height</span>: <span class="number">1300.2</span>, <span class="attr">place</span>: <span class="string">"湖南省亨衡阳市南岳区"</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">"恒山"</span>, <span class="attr">height</span>: <span class="number">2016.1</span>, <span class="attr">place</span>: <span class="string">"山西省大同市浑源县"</span> &#125;</span><br><span class="line">];</span><br></pre></td></tr></table></figure><p>我们的首要目标是想生成表头，那我们知道一个原生的方法<code>createElement()</code>，这个方法会生成一个你往参数里传入的元素。也就是说我们现在用<code>document.createElement(&quot;thead&quot;)</code>就可以生成表头元素了，不过还有更好的方式吗？</p><p>答案是肯定的，我们来看下MDN的<a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/table" target="_blank" rel="noopener">element table reference</a>，可以看到table相关的DOM interface叫做<code>HTMLTableElement</code>，有趣的是这个接口下暴露的方法中有个<code>createTHead()</code>。这个方法返回一个table head element，我们要用一个table来关联他。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 生成表格头</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">generateTableHead</span>(<span class="params">table</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> thead = table.createTHead();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> table = <span class="built_in">document</span>.querySelector(<span class="string">"table"</span>);</span><br><span class="line">generateTableHead(table);</span><br></pre></td></tr></table></figure><p>打开<code>index.html</code>，使用chrome检查下，就可以看到table下已经有thead了。<br>拿一组数据出来:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123; <span class="attr">name</span>: <span class="string">"泰山"</span>, <span class="attr">height</span>: <span class="number">1532.7</span>, <span class="attr">place</span>: <span class="string">"山东省泰安市泰山区"</span> &#125;</span><br><span class="line"><span class="comment">// ...</span></span><br></pre></td></tr></table></figure><p>我们要把这组数据的<code>key</code>转换为表头，按照思路来，那肯定是要在thead里添加一行作为表头信息。使用<code>document.createElement(&quot;tr&quot;)</code>吗？不用，<code>HTMLTableRowElement</code>提供了<code>insertRow()</code>方法来插入行，下面来改下<code>generateTableHead</code>函数:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">generateTableHead</span>(<span class="params">table</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> thead = table.createTHead();</span><br><span class="line">  <span class="keyword">let</span> row = thead.insertRow();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下面呢，我们要在表头里生成三列，我们遍历给的数据，使用Object的key来作为th的内容，从而生成以key作为表头的表格。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">generateTableHead</span>(<span class="params">table, data</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> thead = table.createTHead();</span><br><span class="line">  <span class="keyword">let</span> row = thead.insertRow();</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">of</span> data) &#123;</span><br><span class="line">    <span class="keyword">let</span> th = <span class="built_in">document</span>.createElement(<span class="string">"th"</span>);</span><br><span class="line">    <span class="keyword">let</span> text = <span class="built_in">document</span>.createTextNode(key);</span><br><span class="line">    th.appendChild(text);</span><br><span class="line">    row.appendChild(th);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> table = <span class="built_in">document</span>.querySelector(<span class="string">"table"</span>);</span><br><span class="line"><span class="keyword">let</span> data = <span class="built_in">Object</span>.keys(mountains[<span class="number">0</span>]);</span><br><span class="line"></span><br><span class="line">generateTableHead(table, data);</span><br></pre></td></tr></table></figure><p>保存刷新就可以看到出现了表头，包含name，height和place三个列。现在用同样的思路完成表格内容的创建，我们写个用来生成表格内容的函数：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">generateTable</span>(<span class="params">table, data</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> element <span class="keyword">of</span> data) &#123;</span><br><span class="line">    <span class="keyword">let</span> row = table.insertRow();</span><br><span class="line">    <span class="keyword">for</span> (key <span class="keyword">in</span> element) &#123;</span><br><span class="line">      <span class="keyword">let</span> cell = row.insertCell();</span><br><span class="line">      <span class="keyword">let</span> text = <span class="built_in">document</span>.createTextNode(element[key]);</span><br><span class="line">      cell.appendChild(text);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>现在<code>build-table.js</code>是这样的：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> mountains = [</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">"泰山"</span>, <span class="attr">height</span>: <span class="number">1532.7</span>, <span class="attr">place</span>: <span class="string">"山东省泰安市泰山区"</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">"嵩山"</span>, <span class="attr">height</span>: <span class="number">1491.71</span>, <span class="attr">place</span>: <span class="string">"河南省郑州市登封市"</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">"华山"</span>, <span class="attr">height</span>: <span class="number">2154.9</span>, <span class="attr">place</span>: <span class="string">"陕西省渭南市华阴市"</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">"衡山"</span>, <span class="attr">height</span>: <span class="number">1300.2</span>, <span class="attr">place</span>: <span class="string">"湖南省亨衡阳市南岳区"</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">"恒山"</span>, <span class="attr">height</span>: <span class="number">2016.1</span>, <span class="attr">place</span>: <span class="string">"山西省大同市浑源县"</span> &#125;</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">generateTableHead</span>(<span class="params">table, data</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> thead = table.createTHead();</span><br><span class="line">  <span class="keyword">let</span> row = thead.insertRow();</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">of</span> data) &#123;</span><br><span class="line">    <span class="keyword">let</span> th = <span class="built_in">document</span>.createElement(<span class="string">"th"</span>);</span><br><span class="line">    <span class="keyword">let</span> text = <span class="built_in">document</span>.createTextNode(key);</span><br><span class="line">    th.appendChild(text);</span><br><span class="line">    row.appendChild(th);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">generateTable</span>(<span class="params">table, data</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> element <span class="keyword">of</span> data) &#123;</span><br><span class="line">    <span class="keyword">let</span> row = table.insertRow();</span><br><span class="line">    <span class="keyword">for</span> (key <span class="keyword">in</span> element) &#123;</span><br><span class="line">      <span class="keyword">let</span> cell = row.insertCell();</span><br><span class="line">      <span class="keyword">let</span> text = <span class="built_in">document</span>.createTextNode(element[key]);</span><br><span class="line">      cell.appendChild(text);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> table = <span class="built_in">document</span>.querySelector(<span class="string">"table"</span>);</span><br><span class="line"><span class="keyword">let</span> data = <span class="built_in">Object</span>.keys(mountains[<span class="number">0</span>]);</span><br><span class="line">generateTableHead(table, data);</span><br><span class="line">generateTable(table, mountains);</span><br></pre></td></tr></table></figure><p>保存刷新，我们就可以看到我们的数据已经以表格的形式展现出来了。</p><p>但是，此时我们审查DOM的话，就会看到问题，没有tbody！！！所有tr都在thead里面。调整一下代码:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ...</span></span><br><span class="line"><span class="keyword">let</span> table = <span class="built_in">document</span>.querySelector(<span class="string">"table"</span>);</span><br><span class="line"><span class="keyword">let</span> data = <span class="built_in">Object</span>.keys(mountains[<span class="number">0</span>]);</span><br><span class="line">generateTable(table, mountains); <span class="comment">// 先生成table</span></span><br><span class="line">generateTableHead(table, data); <span class="comment">// 再生成thead</span></span><br></pre></td></tr></table></figure><p>再次保存刷新，这次可以看到结构就正常了。</p><p>至此。我们使用纯js创建一个表格就完成了。</p>]]></content>
      
      
      <categories>
          
          <category> Frontend </category>
          
          <category> 基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Frontend </tag>
            
            <tag> JavaScript </tag>
            
            <tag> Vanilla </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[指南]: JavaScript中的var, let和const</title>
      <link href="/2020/10/13/javascript-var-let-const/"/>
      <url>/2020/10/13/javascript-var-let-const/</url>
      
        <content type="html"><![CDATA[<p><img src="https://www.valentinog.com/blog/static/7e9e29356715f3c4830524da02e4cf68/166a3/var-let-const-cheatsheet.png" alt="header-img"></p><ul><li><a href="#var">var</a><ul><li><a href="#块级作用域和全局作用域">块级作用域和全局作用域</a></li><li><a href="#意料之外的全局变量">意料之外的全局变量</a></li><li><a href="#重新分配和重新声明">重新分配和重新声明</a></li></ul></li><li><a href="#let">let</a><ul><li><a href="#块级作用域">块级作用域</a></li><li><a href="#临时死区">临时死区</a></li><li><a href="#可以重新赋值，不可以重新声明">可以重新赋值，不可以重新声明</a></li></ul></li><li><a href="#const">const</a><ul><li><a href="#const-块级作用域">块级作用域</a></li><li><a href="#const-临时死区">临时死区</a></li><li><a href="#不能重新赋值，不能重新声明">不能重新赋值，不能重新声明</a></li></ul></li></ul><h2 id="var"><a href="#var" class="headerlink" title="var"></a>var</h2><p><code>var</code>用来在JavaScript中声明一个变量，该变量遵循以下规则：</p><ul><li>函数级作用域(块级作用域)或者全局作用域。</li><li>不受暂时死区(Temporal dead zone)的约束。</li><li>在<code>window</code>对象下创建一个同名的全局属性。</li><li>可重新分配。</li><li>可重新声明。</li></ul><h3 id="块级作用域和全局作用域"><a href="#块级作用域和全局作用域" class="headerlink" title="块级作用域和全局作用域"></a>块级作用域和全局作用域</h3><p><code>var</code>如果是在全局作用域下出现，则创建一个全局变量，并且也同时在<code>window</code>对象中创建了一个同名的全局属性。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> city = <span class="string">"Beijing"</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">window</span>.city); <span class="comment">// "Beijing"</span></span><br></pre></td></tr></table></figure><p>当在函数中使用<code>var</code>声明变量时，则是函数级作用域。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> city = <span class="string">"Beijing"</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bubble</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> city = <span class="string">"Hangzhou"</span>;</span><br><span class="line">  <span class="built_in">console</span>.log(city);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">bubble(); <span class="comment">// "Hangzhou"</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(city); <span class="comment">// "Beijing"</span></span><br></pre></td></tr></table></figure><p><code>var</code>具有变量声明提升的特点</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bubble</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  city = <span class="string">"Beijing"</span>;</span><br><span class="line">  <span class="built_in">console</span>.log(city);</span><br><span class="line">  <span class="keyword">var</span> city; <span class="comment">// 被提升</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">bubble(); <span class="comment">// "Beijing"</span></span><br></pre></td></tr></table></figure><h3 id="意料之外的全局变量"><a href="#意料之外的全局变量" class="headerlink" title="意料之外的全局变量"></a>意料之外的全局变量</h3><p>没有使用<code>var</code>、<code>let</code>、<code>const</code>声明的变量，默认成为全局变量：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bubble</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  city = <span class="string">"Beijing"</span>;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="built_in">window</span>.city);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">bubble(); <span class="comment">// "Beijing"</span></span><br></pre></td></tr></table></figure><p>可以通过启用 <code>严格模式</code> 来规避这个问题:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">"use strict"</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bubble</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  city = <span class="string">"Beijing"</span>;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="built_in">window</span>.city);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">bubble(); <span class="comment">// ReferenceError: assignment to undeclared variable city</span></span><br></pre></td></tr></table></figure><h3 id="重新分配和重新声明"><a href="#重新分配和重新声明" class="headerlink" title="重新分配和重新声明"></a>重新分配和重新声明</h3><p>任何使用<code>var</code>定义的变量，都可以在后面再次声明或是再次赋值。</p><p>redeclaration:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bubble</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> city = <span class="string">"Beijing"</span>;</span><br><span class="line">  <span class="keyword">var</span> city = <span class="string">"Hangzhou"</span>;</span><br><span class="line">  <span class="built_in">console</span>.log(city);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">bubble(); <span class="comment">// "Hangzhou"</span></span><br></pre></td></tr></table></figure><p>reassignaton:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bubble</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> city = <span class="string">"Beijing"</span>;</span><br><span class="line">  city = <span class="string">"Hangzhou"</span>;</span><br><span class="line">  <span class="built_in">console</span>.log(city);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">bubble(); <span class="comment">// "Hangzhou"</span></span><br></pre></td></tr></table></figure><h2 id="let"><a href="#let" class="headerlink" title="let"></a>let</h2><p>使用<code>let</code>声明的变量遵循以下规则：</p><ul><li>块级作用域</li><li>受临时死区的限制</li><li>不会在<code>window</code>上创建任何属性</li><li>可以重新赋值</li><li>不可以重新声明</li></ul><h3 id="块级作用域"><a href="#块级作用域" class="headerlink" title="块级作用域"></a>块级作用域</h3><p><code>let</code>声明的变量不会在<code>window</code>上创建任何全局属性</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> city = <span class="string">"Beijing"</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">window</span>.city); <span class="comment">// undefined</span></span><br></pre></td></tr></table></figure><p>当在函数内使用<code>let</code>时，该变量的作用域仅限于函数内</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> city = <span class="string">"Beijing"</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bubble</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> city = <span class="string">"Hanzhou"</span>;</span><br><span class="line">  <span class="built_in">console</span>.log(city);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">bubble(); <span class="comment">// "Hangzhou"</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(city); <span class="comment">// "Beijing"</span></span><br></pre></td></tr></table></figure><p>当在代码块中使用<code>let</code>，改变量的作用域仅限于代码块中</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> city = <span class="string">"Beijing"</span>;</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">let</span> city = <span class="string">"Hangzhou"</span>;</span><br><span class="line">  <span class="built_in">console</span>.log(city); <span class="comment">// "Hangzhou"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(city); <span class="comment">// "Beijing"</span></span><br></pre></td></tr></table></figure><p><code>if</code>代码块</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> city = <span class="string">"Beijing"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> city = <span class="string">"Hangzhou"</span>;</span><br><span class="line">  <span class="built_in">console</span>.log(city); <span class="comment">// "Hangzhou"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(city); <span class="comment">// "Beijing"</span></span><br></pre></td></tr></table></figure><p>如果是<code>var</code>定义的，则不会产生块级作用域</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> city = <span class="string">"Beijing"</span>;</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">var</span> city = <span class="string">"Hangzhou"</span>;</span><br><span class="line">  <span class="built_in">console</span>.log(city); <span class="comment">// "Hangzhou"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">window</span>.city); <span class="comment">// "Hangzhou"</span></span><br></pre></td></tr></table></figure><h3 id="临时死区"><a href="#临时死区" class="headerlink" title="临时死区"></a>临时死区</h3><p><code>let</code>声明会提升，但是会加入临时死区。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bubble</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  city = <span class="string">"Beijing"</span>;</span><br><span class="line">  <span class="built_in">console</span>.log(city); <span class="comment">// TDZ</span></span><br><span class="line">  <span class="keyword">let</span> city;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">bubble(); <span class="comment">// ReferenceError: can't access lexical declaration 'city' before initialization</span></span><br></pre></td></tr></table></figure><p><code>TDZ(Temporal dead zone)</code>临时死区用来方式变量在初始化之前被访问。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bubble</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(city); <span class="comment">// TDZ</span></span><br><span class="line">  <span class="keyword">let</span> city = <span class="string">"Beijing"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">bubble(); <span class="comment">// ReferenceError: can't access lexical declaration 'city' before initialization</span></span><br></pre></td></tr></table></figure><p>出现上面这个异常错误，就代表出现了临时死区。</p><h3 id="可以重新赋值，不可以重新声明"><a href="#可以重新赋值，不可以重新声明" class="headerlink" title="可以重新赋值，不可以重新声明"></a>可以重新赋值，不可以重新声明</h3><p>can’t be redeclared:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bubble</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> city = <span class="string">"Beijing"</span>;</span><br><span class="line">  <span class="keyword">let</span> city = <span class="string">"Hanzhou"</span>;</span><br><span class="line">  <span class="built_in">console</span>.log(city);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">bubble(); <span class="comment">// SyntaxError: redeclaration of let city</span></span><br></pre></td></tr></table></figure><p>reassignation:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bubble</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> city = <span class="string">"Beijing"</span>;</span><br><span class="line">  city = <span class="string">"Hangzhou"</span>;</span><br><span class="line">  <span class="built_in">console</span>.log(city);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">bubble(); <span class="comment">// "Hangzhou"</span></span><br></pre></td></tr></table></figure><h2 id="const"><a href="#const" class="headerlink" title="const"></a>const</h2><p>使用<code>const</code>声明的变量遵循以下规则：</p><ul><li>块级作用域</li><li>受临时死区的限制</li><li>不创建任何挂载到<code>window</code>上的全局属性</li><li>不可以重新赋值</li><li>不可以重新声明</li></ul><h3 id="const-块级作用域"><a href="#const-块级作用域" class="headerlink" title="const-块级作用域"></a>const-块级作用域</h3><p><code>const</code>声明的变量不会在<code>window</code>上创建任何全局属性</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> city = <span class="string">"Beijing"</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">window</span>.city); <span class="comment">// undefined</span></span><br></pre></td></tr></table></figure><p>当在函数内使用<code>const</code>时，该变量的作用域仅限于函数内</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> city = <span class="string">"Beijing"</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bubble</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> city = <span class="string">"Hanzhou"</span>;</span><br><span class="line">  <span class="built_in">console</span>.log(city);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">bubble(); <span class="comment">// "Hangzhou"</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(city); <span class="comment">// "Beijing"</span></span><br></pre></td></tr></table></figure><p>当在代码块中使用<code>const</code>，改变量的作用域仅限于代码块中</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> city = <span class="string">"Beijing"</span>;</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">const</span> city = <span class="string">"Hangzhou"</span>;</span><br><span class="line">  <span class="built_in">console</span>.log(city); <span class="comment">// "Hangzhou"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(city); <span class="comment">// "Beijing"</span></span><br></pre></td></tr></table></figure><p><code>if</code>代码块</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> city = <span class="string">"Beijing"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> city = <span class="string">"Hangzhou"</span>;</span><br><span class="line">  <span class="built_in">console</span>.log(city); <span class="comment">// "Hangzhou"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(city); <span class="comment">// "Beijing"</span></span><br></pre></td></tr></table></figure><h3 id="const-临时死区"><a href="#const-临时死区" class="headerlink" title="const-临时死区"></a>const-临时死区</h3><p><code>const</code>声明会提升，但是会加入临时死区。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bubble</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  city = <span class="string">"Beijing"</span>;</span><br><span class="line">  <span class="keyword">const</span> city;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">bubble(); <span class="comment">// ReferenceError: can't access lexical declaration 'city' before initialization</span></span><br></pre></td></tr></table></figure><h3 id="不能重新赋值，不能重新声明"><a href="#不能重新赋值，不能重新声明" class="headerlink" title="不能重新赋值，不能重新声明"></a>不能重新赋值，不能重新声明</h3><p><code>const</code>声明的变量（常量）不能重新声明，也不能重新赋值。</p><p>can’t be redeclared</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bubble</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> city = <span class="string">"Beijing"</span>;</span><br><span class="line">  <span class="keyword">const</span> city = <span class="string">"Hangzhou"</span>;</span><br><span class="line">  <span class="built_in">console</span>.log(city);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">bubble(); <span class="comment">// SyntaxError: redeclaration of const city</span></span><br></pre></td></tr></table></figure><p>can’t be reassigned</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bubble</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> city = <span class="string">"Beijing"</span>;</span><br><span class="line">  city = <span class="string">"Hangzhou"</span>;</span><br><span class="line">  <span class="built_in">console</span>.log(city);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">bubble(); <span class="comment">// TypeError: invalid assignment to const 'city'</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Frontend </category>
          
          <category> 指南 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Frontend </tag>
            
            <tag> JavaScript </tag>
            
            <tag> ES6 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用 concurrently 同时运行多个 npm 命令</title>
      <link href="/2020/07/30/concurrently/"/>
      <url>/2020/07/30/concurrently/</url>
      
        <content type="html"><![CDATA[<p>我们平时可能需要同时在一个 npm scripts 中运行多个 npm 命令。这时候，我们第一时间想到的 <code>&amp;&amp;</code>，比如 <code>npm run build &amp;&amp; npm start</code>。虽然比较方便，但是很难追踪不同的输出，并且当其中一个进程失败的时候，另外的一个进程仍然在运行。这样就很难排查进程失败的原因是什么。<a href="https://www.npmjs.com/package/concurrently" target="_blank" rel="noopener">concurrently</a> 就可以帮助我们更好的执行脚本。</p><p>你可以全局安装:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g concurrently</span><br></pre></td></tr></table></figure><p>或者作为项目依赖安装:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install concurrently --save</span><br></pre></td></tr></table></figure><p>使用方法:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">concurrently <span class="string">"command1 arg"</span> <span class="string">"command2 arg"</span></span><br></pre></td></tr></table></figure><p>在项目中使用，我们只需要在我们的 npm scripts 里添加一个合并的命令:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"start"</span>: <span class="string">"concurrently \"command1 arg\" \"command2 arg\""</span></span><br></pre></td></tr></table></figure><p>更多文档，详情参考 <a href="https://github.com/kimmobrunfeldt/concurrently#readme" target="_blank" rel="noopener">这里</a>。</p>]]></content>
      
      
      <categories>
          
          <category> Frontend </category>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Frontend </tag>
            
            <tag> JavaScript </tag>
            
            <tag> Node </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于react-boilerplate脚手架添加前端代理</title>
      <link href="/2019/09/29/How-to-add-proxy-middleware-based-on-react-boilerplate/"/>
      <url>/2019/09/29/How-to-add-proxy-middleware-based-on-react-boilerplate/</url>
      
        <content type="html"><![CDATA[<p><code>React-Boilerplate</code>是一个对开发者非常友好的React脚手架，官方有很详细的文档，脚手架本身可配置的地方也很多，基本可以满足React开发中的自定义需求。本文介绍了如何在此脚手架添加前端Proxy，使api访问能够代理到指定ip。</p><h3 id="安装开发依赖-http-proxy-middleware"><a href="#安装开发依赖-http-proxy-middleware" class="headerlink" title="安装开发依赖 http-proxy-middleware"></a>安装开发依赖 <code>http-proxy-middleware</code></h3><p>前端常用的npm包，用来做node server代理的。通过npm或yarn作为开发依赖安装。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i http-proxy-middleware -D / yarn add http-proxy-middleware -D</span><br></pre></td></tr></table></figure><h3 id="在项目根目录添加-proxy-json-文件"><a href="#在项目根目录添加-proxy-json-文件" class="headerlink" title="在项目根目录添加 proxy.json 文件"></a>在项目根目录添加 <code>proxy.json</code> 文件</h3><p>此文件就是需要代理的api和转发到的ip以及端口了。具体撰写格式仿照下面:</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"default"</span>: &#123;</span><br><span class="line">    <span class="attr">"api"</span>: <span class="string">"http://localhost:8080"</span>,</span><br><span class="line">    <span class="attr">"endpoints"</span>: [</span><br><span class="line">      <span class="string">"/api/*"</span>,</span><br><span class="line">      <span class="string">"/auth/*"</span></span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"biz"</span>: &#123;</span><br><span class="line">    <span class="attr">"api"</span>: <span class="string">"http://localhost:8081"</span>,</span><br><span class="line">    <span class="attr">"endpoints"</span>: [</span><br><span class="line">      <span class="string">"/sys/*"</span>,</span><br><span class="line">      <span class="string">"/biz/*"</span></span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><code>*</code> 号会匹配 <code>/</code> 后面所有字符；</p></blockquote><h3 id="在server-middlewares文件夹里添加-addProxyMiddlewares-js-文件"><a href="#在server-middlewares文件夹里添加-addProxyMiddlewares-js-文件" class="headerlink" title="在server/middlewares文件夹里添加 addProxyMiddlewares.js 文件"></a>在server/middlewares文件夹里添加 <code>addProxyMiddlewares.js</code> 文件</h3><p>在这个文件里我们读取最外面的 <code>proxy.json</code> 并生成代理。代码如下:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* eslint-disable no-console */</span></span><br><span class="line"><span class="comment">// const proxy = require('http-proxy-middleware'); // 0.x.x版本用法</span></span><br><span class="line"><span class="keyword">const</span> &#123; createProxyMiddleware &#125; = <span class="built_in">require</span>(<span class="string">'http-proxy-middleware'</span>);</span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"><span class="keyword">const</span> chalk = <span class="built_in">require</span>(<span class="string">'chalk'</span>);</span><br><span class="line"><span class="keyword">const</span> logger = <span class="built_in">require</span>(<span class="string">'../logger'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Proxy middleware</span></span><br><span class="line"><span class="keyword">const</span> addProxyMiddlewares = <span class="function">(<span class="params">app, proxyPath</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> proxyConfig = &#123;&#125;;</span><br><span class="line">  <span class="keyword">if</span> (fs.existsSync(proxyPath)) &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      proxyConfig = <span class="built_in">JSON</span>.parse(fs.readFileSync(proxyPath, <span class="string">'utf-8'</span>));</span><br><span class="line">    &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">      logger.error(<span class="string">`parse ./proxy.json: <span class="subst">$&#123;error.message&#125;</span>`</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> servicesKeys = <span class="built_in">Object</span>.keys(proxyConfig);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'proxy config:'</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">JSON</span>.stringify(proxyConfig, <span class="number">0</span>, <span class="number">4</span>));</span><br><span class="line">    servicesKeys.forEach(<span class="function"><span class="params">key</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> service = proxyConfig[key];</span><br><span class="line">      <span class="keyword">const</span> &#123; api &#125; = service;</span><br><span class="line">      <span class="keyword">const</span> logLevel = service.logLevel || <span class="string">'info'</span>;</span><br><span class="line">      <span class="comment">// const Proxy = proxy(&#123; // 0.x.x版本用法</span></span><br><span class="line">      <span class="comment">//   target: api,</span></span><br><span class="line">      <span class="comment">//   logLevel,</span></span><br><span class="line">      <span class="comment">//   changeOrigin: true,</span></span><br><span class="line">      <span class="comment">// &#125;);</span></span><br><span class="line">      <span class="keyword">const</span> <span class="built_in">Proxy</span> = createProxyMiddleware(&#123;</span><br><span class="line">        target: api,</span><br><span class="line">        logLevel,</span><br><span class="line">        changeOrigin: <span class="literal">true</span></span><br><span class="line">      &#125;);</span><br><span class="line">      service.endpoints.forEach(<span class="function"><span class="params">endpoint</span> =&gt;</span> &#123;</span><br><span class="line">        app.all(endpoint, (req, res, next) =&gt; &#123;</span><br><span class="line">          <span class="built_in">console</span>.log(</span><br><span class="line">            <span class="string">`<span class="subst">$&#123;chalk.bold(<span class="string">'-&gt;'</span>)&#125;</span>: <span class="subst">$&#123;chalk.bold(req.url)&#125;</span> to <span class="subst">$&#123;chalk.gray(api)&#125;</span>`</span>,</span><br><span class="line">          );</span><br><span class="line">          <span class="keyword">return</span> <span class="built_in">Proxy</span>(req, res, next);</span><br><span class="line">        &#125;);</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">    logger.error(<span class="string">`proxy config error: <span class="subst">$&#123;error.message&#125;</span>`</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = <span class="function">(<span class="params">app, options</span>) =&gt;</span> &#123;</span><br><span class="line">  addProxyMiddlewares(app, options);</span><br><span class="line">  <span class="keyword">return</span> app;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>这里用到外层的 <code>logger.js</code> 在上一层文件夹里，脚手架自带的，用来在node启动服务时，打印一些日志或错误信息用的。</p></blockquote><h3 id="使用代理中间件"><a href="#使用代理中间件" class="headerlink" title="使用代理中间件"></a>使用代理中间件</h3><p>在 <code>server/middlewares</code> 文件夹里，找到 <code>frontendMiddleware.js</code>。使用代理包裹app实例。具体代码如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* eslint-disable global-require */</span></span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Front-end middleware</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="built_in">module</span>.exports = <span class="function">(<span class="params">app, options</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> isProd = process.env.NODE_ENV === <span class="string">'production'</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (isProd) &#123;</span><br><span class="line">    <span class="keyword">const</span> addProdMiddlewares = <span class="built_in">require</span>(<span class="string">'./addProdMiddlewares'</span>);</span><br><span class="line">    addProdMiddlewares(app, options);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> webpackConfig = <span class="built_in">require</span>(<span class="string">'../../internals/webpack/webpack.dev.babel'</span>);</span><br><span class="line">    <span class="keyword">const</span> addDevMiddlewares = <span class="built_in">require</span>(<span class="string">'./addDevMiddlewares'</span>);</span><br><span class="line">    <span class="keyword">const</span> addProxyMiddlewares = <span class="built_in">require</span>(<span class="string">'./addProxyMiddlewares'</span>);</span><br><span class="line">    <span class="keyword">const</span> proxyPath = path.resolve(process.cwd(), <span class="string">'proxy.json'</span>);</span><br><span class="line">    addProxyMiddlewares(app, proxyPath);</span><br><span class="line">    addDevMiddlewares(app, webpackConfig);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> app;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="完成"><a href="#完成" class="headerlink" title="完成"></a>完成</h3><p>此时就可以在 <code>proxy.json</code> 中添加你想要代理的api和ip了。然后通过 <code>npm start</code> 启动，可以看到控制台里会打印出代理的ip和发送的一些请求。此脚手架还可以通过 <code>PORT=4000 npm start</code> 的方式，指定端口启动。 </p>]]></content>
      
      
      <categories>
          
          <category> Frontend </category>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Frontend </tag>
            
            <tag> JavaScript </tag>
            
            <tag> React </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>联想zuk z2 pro线刷官方底包</title>
      <link href="/2019/08/12/how-to-usb-flash-rom-on-lenovo-zuk-z2-pro/"/>
      <url>/2019/08/12/how-to-usb-flash-rom-on-lenovo-zuk-z2-pro/</url>
      
        <content type="html"><![CDATA[<h3 id="ROM说明"><a href="#ROM说明" class="headerlink" title="ROM说明"></a>ROM说明</h3><p>适配机型：联想zuk z2 pro（z2121）<br>zui版本：zui 4.0.247<br>安卓版本：8.0<br>刷机类型：线刷包<br>压缩包大小：1.8G<br>包名：Z2121_CN_OPEN_USER_Q00030.1_O_ZUI_4.0.247_ST_181017_qpst.zip<br>包下载地址：<a href="https://pan.baidu.com/s/1d4IL0aZbJ4ffNaS5D7YWMg" target="_blank" rel="noopener">ROM</a> 提取码: stf7<br>工具下载地址：<a href="https://pan.baidu.com/s/1YnMxVe2lyQqtuReB75xBUQ" target="_blank" rel="noopener">刷机工具</a> 提取码: ecmk  </p><blockquote><p>刷机前请注意备份数据。</p></blockquote><h3 id="过程"><a href="#过程" class="headerlink" title="过程"></a>过程</h3><ol><li><p>下载ROM包和线刷工具，解压工具包。找到QPST.2.7.434.msi，安装。* 请提前安装zuk驱动和vc支持库。<br><img src="https://pcs4.clubstatic.lenovo.com.cn/data/attachment/forum/201606/27/140511saqtlee33xazjagx.jpg.thumb.jpg" alt="qpst"><br>注意：若双击qpst安装时出现下图界面，则需要安装Microsoft .NET Framework 4.0。<br><img src="https://pcs4.clubstatic.lenovo.com.cn/data/attachment/forum/201606/27/140518hx2841c3ceb0xkih.jpg.thumb.jpg" alt="alert">  </p></li><li><p>安装完成后，找到QFIL程序，打开。  </p><ol><li>进入QFIL的<code>Configuration</code>标签页的<code>FireHoseConfiguration</code>, Device Type选择<code>UFS</code>，勾选<code>Reset After Download</code>。<br><img src="https://pcs4.clubstatic.lenovo.com.cn/data/attachment/forum/201606/27/140520ns9fqs64dl68eopm.jpg.thumb.jpg" alt="config">  </li><li>Select Build Type选择<code>Meta Build</code>，点击<code>Load Content</code>，定位到下载的底包文件夹里的<code>contents.xml</code>，选择确定。<br><img src="https://pcs4.clubstatic.lenovo.com.cn/data/attachment/forum/201606/27/140522hu64ffu4av4oafv7.jpg.thumb.jpg" alt="before download">  </li><li>usb数据线<code>一端先连接电脑</code>，然后手机<code>关机</code>状态下，按住<code>音量上</code>键不松，然后按住<code>电源键</code>的同时<code>数据线插入手机</code>，插入后松开电源键，看到QFIL界面出现<code>9008端口</code>时，放开音量上键。<br><img src="https://pcs4.clubstatic.lenovo.com.cn/data/attachment/forum/201606/27/145804vmhqixhrrilzxqxe.jpg.thumb.jpg" alt="show">  </li><li>点击<code>Download Content</code>手机会进入升级模式。升级完成后在status里会看到<code>Download Succeed</code>的日志带出即为成功。  </li></ol></li></ol><blockquote><p>如果一直无法识别9008端口，可以尝试一下方法:</p><ul><li>开机状态下，进入【开发者选项】开启【允许USB调试】，连接电脑使用cmd（或adb）命令行工具，输入adb reboot edl回车运行，运行成功后手机将重启进入9008端口。(注意看手机提示，如果有提示需要允许调试，请允许)  </li><li>先进入工程模式，进入方式有2种：<ul><li>进入方式1：关机机状态下【按住音量下+电源键】，先出现白色ZUK标志，等待2s进入工程模式（全英文界面）;</li><li>进入方式2：关机状态下【按住音量下】，然后插入数据线，手机震动后放开按键，等待2s左右出现工程模式（全英文界面）;  </li></ul></li></ul></blockquote><p>  进入工程模式后，插入数据线连接电脑，QFIL软件上显示shenqi USB端口，然后点击【download】触发9008端口。</p><ul><li>关机状态下【同时按住音量键+电源键+指纹键】，大概震动和重启8~9次，看到进入9008端口就放开。</li><li>准备两根数据线，其中一根自制为工程线，操作如下：<ol><li>把一根数据线表皮剥开，可以看到里面有红色，白色，黑色，绿色四条线；</li><li>先把黑色和绿色的线剪断，然后把剪断后的黑线和绿线的表皮剥开，露出里面的铜线；</li><li>把黑线和绿线露出的铜线进行短接（也就是缠绕，拧在一起），做成工程线；</li><li>分别把普通数据线和自制工程线事先都连接到电脑，打开qpst刷机工具配置好；</li><li>一直按住电源键，先用工程线连接手机，等到手机震动一下之后拔掉并放开电源键；</li><li>手机立即再连接普通的数据线（速度尽可能快），电脑上显示9008端口。<br>（注意：如果QFIL工具提示 please select an existing port，请点击右上角select a port，勾选9008点击OK）  </li></ol></li><li>如果条件有限，可以尝试另一种方式：<ol><li>把一根数据线表皮剥开，可以看到里面有红色，白色，黑色，绿色四条线；</li><li>然后把黑线和绿线的表皮剥开一段，露出里面的铜线；</li><li>用把黑线和绿线露出的铜线进行短接（可以用金属夹子先夹住）；</li><li>打开qpst刷机工具配置好，按住电源键，用这条线连接手机和电脑，等到手机震动一下之后松开短接的铜线；</li><li>如果连接顺利，QFIL应该也会出现9008端口；</li></ol></li></ul>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 刷机 </tag>
            
            <tag> Android </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello Everyone</title>
      <link href="/2018/01/05/hello-hexo/"/>
      <url>/2018/01/05/hello-hexo/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
          <category> Mac </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Tech </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
